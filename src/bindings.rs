/* automatically generated by rust-bindgen 0.57.0 */

#[repr(C)]
#[derive(Protocol)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const XMD_H: u32 = 1;
pub const sz_xSegment: u32 = 8;
pub const sz_xPoint: u32 = 4;
pub const sz_xRectangle: u32 = 8;
pub const sz_xArc: u32 = 12;
pub const sz_xConnClientPrefix: u32 = 12;
pub const sz_xConnSetupPrefix: u32 = 8;
pub const sz_xConnSetup: u32 = 32;
pub const sz_xPixmapFormat: u32 = 8;
pub const sz_xDepth: u32 = 8;
pub const sz_xVisualType: u32 = 24;
pub const sz_xWindowRoot: u32 = 40;
pub const sz_xTimecoord: u32 = 8;
pub const sz_xHostEntry: u32 = 4;
pub const sz_xCharInfo: u32 = 12;
pub const sz_xFontProp: u32 = 8;
pub const sz_xTextElt: u32 = 2;
pub const sz_xColorItem: u32 = 12;
pub const sz_xrgb: u32 = 8;
pub const sz_xGenericReply: u32 = 32;
pub const sz_xGetWindowAttributesReply: u32 = 44;
pub const sz_xGetGeometryReply: u32 = 32;
pub const sz_xQueryTreeReply: u32 = 32;
pub const sz_xInternAtomReply: u32 = 32;
pub const sz_xGetAtomNameReply: u32 = 32;
pub const sz_xGetPropertyReply: u32 = 32;
pub const sz_xListPropertiesReply: u32 = 32;
pub const sz_xGetSelectionOwnerReply: u32 = 32;
pub const sz_xGrabPointerReply: u32 = 32;
pub const sz_xQueryPointerReply: u32 = 32;
pub const sz_xGetMotionEventsReply: u32 = 32;
pub const sz_xTranslateCoordsReply: u32 = 32;
pub const sz_xGetInputFocusReply: u32 = 32;
pub const sz_xQueryKeymapReply: u32 = 40;
pub const sz_xQueryFontReply: u32 = 60;
pub const sz_xQueryTextExtentsReply: u32 = 32;
pub const sz_xListFontsReply: u32 = 32;
pub const sz_xGetFontPathReply: u32 = 32;
pub const sz_xGetImageReply: u32 = 32;
pub const sz_xListInstalledColormapsReply: u32 = 32;
pub const sz_xAllocColorReply: u32 = 32;
pub const sz_xAllocNamedColorReply: u32 = 32;
pub const sz_xAllocColorCellsReply: u32 = 32;
pub const sz_xAllocColorPlanesReply: u32 = 32;
pub const sz_xQueryColorsReply: u32 = 32;
pub const sz_xLookupColorReply: u32 = 32;
pub const sz_xQueryBestSizeReply: u32 = 32;
pub const sz_xQueryExtensionReply: u32 = 32;
pub const sz_xListExtensionsReply: u32 = 32;
pub const sz_xSetMappingReply: u32 = 32;
pub const sz_xGetKeyboardControlReply: u32 = 52;
pub const sz_xGetPointerControlReply: u32 = 32;
pub const sz_xGetScreenSaverReply: u32 = 32;
pub const sz_xListHostsReply: u32 = 32;
pub const sz_xSetModifierMappingReply: u32 = 32;
pub const sz_xError: u32 = 32;
pub const sz_xEvent: u32 = 32;
pub const sz_xKeymapEvent: u32 = 32;
pub const sz_xReq: u32 = 4;
pub const sz_xResourceReq: u32 = 8;
pub const sz_xCreateWindowReq: u32 = 32;
pub const sz_xChangeWindowAttributesReq: u32 = 12;
pub const sz_xChangeSaveSetReq: u32 = 8;
pub const sz_xReparentWindowReq: u32 = 16;
pub const sz_xConfigureWindowReq: u32 = 12;
pub const sz_xCirculateWindowReq: u32 = 8;
pub const sz_xInternAtomReq: u32 = 8;
pub const sz_xChangePropertyReq: u32 = 24;
pub const sz_xDeletePropertyReq: u32 = 12;
pub const sz_xGetPropertyReq: u32 = 24;
pub const sz_xSetSelectionOwnerReq: u32 = 16;
pub const sz_xConvertSelectionReq: u32 = 24;
pub const sz_xSendEventReq: u32 = 44;
pub const sz_xGrabPointerReq: u32 = 24;
pub const sz_xGrabButtonReq: u32 = 24;
pub const sz_xUngrabButtonReq: u32 = 12;
pub const sz_xChangeActivePointerGrabReq: u32 = 16;
pub const sz_xGrabKeyboardReq: u32 = 16;
pub const sz_xGrabKeyReq: u32 = 16;
pub const sz_xUngrabKeyReq: u32 = 12;
pub const sz_xAllowEventsReq: u32 = 8;
pub const sz_xGetMotionEventsReq: u32 = 16;
pub const sz_xTranslateCoordsReq: u32 = 16;
pub const sz_xWarpPointerReq: u32 = 24;
pub const sz_xSetInputFocusReq: u32 = 12;
pub const sz_xOpenFontReq: u32 = 12;
pub const sz_xQueryTextExtentsReq: u32 = 8;
pub const sz_xListFontsReq: u32 = 8;
pub const sz_xSetFontPathReq: u32 = 8;
pub const sz_xCreatePixmapReq: u32 = 16;
pub const sz_xCreateGCReq: u32 = 16;
pub const sz_xChangeGCReq: u32 = 12;
pub const sz_xCopyGCReq: u32 = 16;
pub const sz_xSetDashesReq: u32 = 12;
pub const sz_xSetClipRectanglesReq: u32 = 12;
pub const sz_xCopyAreaReq: u32 = 28;
pub const sz_xCopyPlaneReq: u32 = 32;
pub const sz_xPolyPointReq: u32 = 12;
pub const sz_xPolySegmentReq: u32 = 12;
pub const sz_xFillPolyReq: u32 = 16;
pub const sz_xPutImageReq: u32 = 24;
pub const sz_xGetImageReq: u32 = 20;
pub const sz_xPolyTextReq: u32 = 16;
pub const sz_xImageTextReq: u32 = 16;
pub const sz_xCreateColormapReq: u32 = 16;
pub const sz_xCopyColormapAndFreeReq: u32 = 12;
pub const sz_xAllocColorReq: u32 = 16;
pub const sz_xAllocNamedColorReq: u32 = 12;
pub const sz_xAllocColorCellsReq: u32 = 12;
pub const sz_xAllocColorPlanesReq: u32 = 16;
pub const sz_xFreeColorsReq: u32 = 12;
pub const sz_xStoreColorsReq: u32 = 8;
pub const sz_xStoreNamedColorReq: u32 = 16;
pub const sz_xQueryColorsReq: u32 = 8;
pub const sz_xLookupColorReq: u32 = 12;
pub const sz_xCreateCursorReq: u32 = 32;
pub const sz_xCreateGlyphCursorReq: u32 = 32;
pub const sz_xRecolorCursorReq: u32 = 20;
pub const sz_xQueryBestSizeReq: u32 = 12;
pub const sz_xQueryExtensionReq: u32 = 8;
pub const sz_xChangeKeyboardControlReq: u32 = 8;
pub const sz_xBellReq: u32 = 4;
pub const sz_xChangePointerControlReq: u32 = 12;
pub const sz_xSetScreenSaverReq: u32 = 12;
pub const sz_xChangeHostsReq: u32 = 8;
pub const sz_xListHostsReq: u32 = 4;
pub const sz_xChangeModeReq: u32 = 4;
pub const sz_xRotatePropertiesReq: u32 = 12;
pub const sz_xReply: u32 = 32;
pub const sz_xGrabKeyboardReply: u32 = 32;
pub const sz_xListFontsWithInfoReply: u32 = 60;
pub const sz_xSetPointerMappingReply: u32 = 32;
pub const sz_xGetKeyboardMappingReply: u32 = 32;
pub const sz_xGetPointerMappingReply: u32 = 32;
pub const sz_xGetModifierMappingReply: u32 = 32;
pub const sz_xListFontsWithInfoReq: u32 = 8;
pub const sz_xPolyLineReq: u32 = 12;
pub const sz_xPolyArcReq: u32 = 12;
pub const sz_xPolyRectangleReq: u32 = 12;
pub const sz_xPolyFillRectangleReq: u32 = 12;
pub const sz_xPolyFillArcReq: u32 = 12;
pub const sz_xPolyText8Req: u32 = 16;
pub const sz_xPolyText16Req: u32 = 16;
pub const sz_xImageText8Req: u32 = 16;
pub const sz_xImageText16Req: u32 = 16;
pub const sz_xSetPointerMappingReq: u32 = 4;
pub const sz_xForceScreenSaverReq: u32 = 4;
pub const sz_xSetCloseDownModeReq: u32 = 4;
pub const sz_xClearAreaReq: u32 = 16;
pub const sz_xSetAccessControlReq: u32 = 4;
pub const sz_xGetKeyboardMappingReq: u32 = 8;
pub const sz_xSetModifierMappingReq: u32 = 4;
pub const sz_xPropIconSize: u32 = 24;
pub const sz_xChangeKeyboardMappingReq: u32 = 8;
pub const X_TCP_PORT: u32 = 6000;
pub const xTrue: u32 = 1;
pub const xFalse: u32 = 0;
pub const ELFlagFocus: u32 = 1;
pub const ELFlagSameScreen: u32 = 2;
pub const X_Reply: u32 = 1;
pub const X_Error: u32 = 0;
pub const X_CreateWindow: u32 = 1;
pub const X_ChangeWindowAttributes: u32 = 2;
pub const X_GetWindowAttributes: u32 = 3;
pub const X_DestroyWindow: u32 = 4;
pub const X_DestroySubwindows: u32 = 5;
pub const X_ChangeSaveSet: u32 = 6;
pub const X_ReparentWindow: u32 = 7;
pub const X_MapWindow: u32 = 8;
pub const X_MapSubwindows: u32 = 9;
pub const X_UnmapWindow: u32 = 10;
pub const X_UnmapSubwindows: u32 = 11;
pub const X_ConfigureWindow: u32 = 12;
pub const X_CirculateWindow: u32 = 13;
pub const X_GetGeometry: u32 = 14;
pub const X_QueryTree: u32 = 15;
pub const X_InternAtom: u32 = 16;
pub const X_GetAtomName: u32 = 17;
pub const X_ChangeProperty: u32 = 18;
pub const X_DeleteProperty: u32 = 19;
pub const X_GetProperty: u32 = 20;
pub const X_ListProperties: u32 = 21;
pub const X_SetSelectionOwner: u32 = 22;
pub const X_GetSelectionOwner: u32 = 23;
pub const X_ConvertSelection: u32 = 24;
pub const X_SendEvent: u32 = 25;
pub const X_GrabPointer: u32 = 26;
pub const X_UngrabPointer: u32 = 27;
pub const X_GrabButton: u32 = 28;
pub const X_UngrabButton: u32 = 29;
pub const X_ChangeActivePointerGrab: u32 = 30;
pub const X_GrabKeyboard: u32 = 31;
pub const X_UngrabKeyboard: u32 = 32;
pub const X_GrabKey: u32 = 33;
pub const X_UngrabKey: u32 = 34;
pub const X_AllowEvents: u32 = 35;
pub const X_GrabServer: u32 = 36;
pub const X_UngrabServer: u32 = 37;
pub const X_QueryPointer: u32 = 38;
pub const X_GetMotionEvents: u32 = 39;
pub const X_TranslateCoords: u32 = 40;
pub const X_WarpPointer: u32 = 41;
pub const X_SetInputFocus: u32 = 42;
pub const X_GetInputFocus: u32 = 43;
pub const X_QueryKeymap: u32 = 44;
pub const X_OpenFont: u32 = 45;
pub const X_CloseFont: u32 = 46;
pub const X_QueryFont: u32 = 47;
pub const X_QueryTextExtents: u32 = 48;
pub const X_ListFonts: u32 = 49;
pub const X_ListFontsWithInfo: u32 = 50;
pub const X_SetFontPath: u32 = 51;
pub const X_GetFontPath: u32 = 52;
pub const X_CreatePixmap: u32 = 53;
pub const X_FreePixmap: u32 = 54;
pub const X_CreateGC: u32 = 55;
pub const X_ChangeGC: u32 = 56;
pub const X_CopyGC: u32 = 57;
pub const X_SetDashes: u32 = 58;
pub const X_SetClipRectangles: u32 = 59;
pub const X_FreeGC: u32 = 60;
pub const X_ClearArea: u32 = 61;
pub const X_CopyArea: u32 = 62;
pub const X_CopyPlane: u32 = 63;
pub const X_PolyPoint: u32 = 64;
pub const X_PolyLine: u32 = 65;
pub const X_PolySegment: u32 = 66;
pub const X_PolyRectangle: u32 = 67;
pub const X_PolyArc: u32 = 68;
pub const X_FillPoly: u32 = 69;
pub const X_PolyFillRectangle: u32 = 70;
pub const X_PolyFillArc: u32 = 71;
pub const X_PutImage: u32 = 72;
pub const X_GetImage: u32 = 73;
pub const X_PolyText8: u32 = 74;
pub const X_PolyText16: u32 = 75;
pub const X_ImageText8: u32 = 76;
pub const X_ImageText16: u32 = 77;
pub const X_CreateColormap: u32 = 78;
pub const X_FreeColormap: u32 = 79;
pub const X_CopyColormapAndFree: u32 = 80;
pub const X_InstallColormap: u32 = 81;
pub const X_UninstallColormap: u32 = 82;
pub const X_ListInstalledColormaps: u32 = 83;
pub const X_AllocColor: u32 = 84;
pub const X_AllocNamedColor: u32 = 85;
pub const X_AllocColorCells: u32 = 86;
pub const X_AllocColorPlanes: u32 = 87;
pub const X_FreeColors: u32 = 88;
pub const X_StoreColors: u32 = 89;
pub const X_StoreNamedColor: u32 = 90;
pub const X_QueryColors: u32 = 91;
pub const X_LookupColor: u32 = 92;
pub const X_CreateCursor: u32 = 93;
pub const X_CreateGlyphCursor: u32 = 94;
pub const X_FreeCursor: u32 = 95;
pub const X_RecolorCursor: u32 = 96;
pub const X_QueryBestSize: u32 = 97;
pub const X_QueryExtension: u32 = 98;
pub const X_ListExtensions: u32 = 99;
pub const X_ChangeKeyboardMapping: u32 = 100;
pub const X_GetKeyboardMapping: u32 = 101;
pub const X_ChangeKeyboardControl: u32 = 102;
pub const X_GetKeyboardControl: u32 = 103;
pub const X_Bell: u32 = 104;
pub const X_ChangePointerControl: u32 = 105;
pub const X_GetPointerControl: u32 = 106;
pub const X_SetScreenSaver: u32 = 107;
pub const X_GetScreenSaver: u32 = 108;
pub const X_ChangeHosts: u32 = 109;
pub const X_ListHosts: u32 = 110;
pub const X_SetAccessControl: u32 = 111;
pub const X_SetCloseDownMode: u32 = 112;
pub const X_KillClient: u32 = 113;
pub const X_RotateProperties: u32 = 114;
pub const X_ForceScreenSaver: u32 = 115;
pub const X_SetPointerMapping: u32 = 116;
pub const X_GetPointerMapping: u32 = 117;
pub const X_SetModifierMapping: u32 = 118;
pub const X_GetModifierMapping: u32 = 119;
pub const X_NoOperation: u32 = 127;
pub type INT64 = ::std::os::raw::c_long;
pub type INT32 = ::std::os::raw::c_int;
pub type INT16 = ::std::os::raw::c_short;
pub type INT8 = ::std::os::raw::c_schar;
pub type CARD64 = ::std::os::raw::c_ulong;
pub type CARD32 = ::std::os::raw::c_uint;
pub type CARD16 = ::std::os::raw::c_ushort;
pub type CARD8 = ::std::os::raw::c_uchar;
pub type BITS32 = CARD32;
pub type BITS16 = CARD16;
pub type BYTE = CARD8;
pub type BOOL = CARD8;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xSegment {
    pub x1: INT16,
    pub y1: INT16,
    pub x2: INT16,
    pub y2: INT16,
}
#[test]
fn bindgen_test_layout__xSegment() {
    assert_eq!(
        ::std::mem::size_of::<_xSegment>(),
        8usize,
        concat!("Size of: ", stringify!(_xSegment))
    );
    assert_eq!(
        ::std::mem::align_of::<_xSegment>(),
        2usize,
        concat!("Alignment of ", stringify!(_xSegment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xSegment>())).x1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xSegment),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xSegment>())).y1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xSegment),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xSegment>())).x2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xSegment),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xSegment>())).y2 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xSegment),
            "::",
            stringify!(y2)
        )
    );
}
pub type xSegment = _xSegment;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xPoint {
    pub x: INT16,
    pub y: INT16,
}
#[test]
fn bindgen_test_layout__xPoint() {
    assert_eq!(
        ::std::mem::size_of::<_xPoint>(),
        4usize,
        concat!("Size of: ", stringify!(_xPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<_xPoint>(),
        2usize,
        concat!("Alignment of ", stringify!(_xPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xPoint>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xPoint>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xPoint),
            "::",
            stringify!(y)
        )
    );
}
pub type xPoint = _xPoint;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xRectangle {
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
}
#[test]
fn bindgen_test_layout__xRectangle() {
    assert_eq!(
        ::std::mem::size_of::<_xRectangle>(),
        8usize,
        concat!("Size of: ", stringify!(_xRectangle))
    );
    assert_eq!(
        ::std::mem::align_of::<_xRectangle>(),
        2usize,
        concat!("Alignment of ", stringify!(_xRectangle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xRectangle>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xRectangle),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xRectangle>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xRectangle),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xRectangle>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xRectangle),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xRectangle>())).height as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xRectangle),
            "::",
            stringify!(height)
        )
    );
}
pub type xRectangle = _xRectangle;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xArc {
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub angle1: INT16,
    pub angle2: INT16,
}
#[test]
fn bindgen_test_layout__xArc() {
    assert_eq!(
        ::std::mem::size_of::<_xArc>(),
        12usize,
        concat!("Size of: ", stringify!(_xArc))
    );
    assert_eq!(
        ::std::mem::align_of::<_xArc>(),
        2usize,
        concat!("Alignment of ", stringify!(_xArc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xArc>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_xArc), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xArc>())).y as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(_xArc), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xArc>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xArc),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xArc>())).height as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xArc),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xArc>())).angle1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xArc),
            "::",
            stringify!(angle1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xArc>())).angle2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xArc),
            "::",
            stringify!(angle2)
        )
    );
}
pub type xArc = _xArc;
pub type KeyButMask = CARD16;
#[doc = "Connection setup structures.  See Chapter 8: Connection Setup"]
#[doc = "of the X Window System Protocol specification for details."]
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xConnClientPrefix {
    pub byteOrder: CARD8,
    pub pad: BYTE,
    pub majorVersion: CARD16,
    pub minorVersion: CARD16,
    pub nbytesAuthProto: CARD16,
    pub nbytesAuthString: CARD16,
    pub pad2: CARD16,
}
#[test]
fn bindgen_test_layout_xConnClientPrefix() {
    assert_eq!(
        ::std::mem::size_of::<xConnClientPrefix>(),
        12usize,
        concat!("Size of: ", stringify!(xConnClientPrefix))
    );
    assert_eq!(
        ::std::mem::align_of::<xConnClientPrefix>(),
        2usize,
        concat!("Alignment of ", stringify!(xConnClientPrefix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnClientPrefix>())).byteOrder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnClientPrefix),
            "::",
            stringify!(byteOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnClientPrefix>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnClientPrefix),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnClientPrefix>())).majorVersion as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnClientPrefix),
            "::",
            stringify!(majorVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnClientPrefix>())).minorVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnClientPrefix),
            "::",
            stringify!(minorVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xConnClientPrefix>())).nbytesAuthProto as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnClientPrefix),
            "::",
            stringify!(nbytesAuthProto)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xConnClientPrefix>())).nbytesAuthString as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnClientPrefix),
            "::",
            stringify!(nbytesAuthString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnClientPrefix>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnClientPrefix),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xConnSetupPrefix {
    pub success: CARD8,
    pub lengthReason: BYTE,
    pub majorVersion: CARD16,
    pub minorVersion: CARD16,
    pub length: CARD16,
}
#[test]
fn bindgen_test_layout_xConnSetupPrefix() {
    assert_eq!(
        ::std::mem::size_of::<xConnSetupPrefix>(),
        8usize,
        concat!("Size of: ", stringify!(xConnSetupPrefix))
    );
    assert_eq!(
        ::std::mem::align_of::<xConnSetupPrefix>(),
        2usize,
        concat!("Alignment of ", stringify!(xConnSetupPrefix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetupPrefix>())).success as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetupPrefix),
            "::",
            stringify!(success)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetupPrefix>())).lengthReason as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetupPrefix),
            "::",
            stringify!(lengthReason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetupPrefix>())).majorVersion as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetupPrefix),
            "::",
            stringify!(majorVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetupPrefix>())).minorVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetupPrefix),
            "::",
            stringify!(minorVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetupPrefix>())).length as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetupPrefix),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xConnSetup {
    pub release: CARD32,
    pub ridBase: CARD32,
    pub ridMask: CARD32,
    pub motionBufferSize: CARD32,
    pub nbytesVendor: CARD16,
    pub maxRequestSize: CARD16,
    pub numRoots: CARD8,
    pub numFormats: CARD8,
    pub imageByteOrder: CARD8,
    pub bitmapBitOrder: CARD8,
    pub bitmapScanlineUnit: CARD8,
    pub bitmapScanlinePad: CARD8,
    pub minKeyCode: CARD8,
    pub maxKeyCode: CARD8,
    pub pad2: CARD32,
}
#[test]
fn bindgen_test_layout_xConnSetup() {
    assert_eq!(
        ::std::mem::size_of::<xConnSetup>(),
        32usize,
        concat!("Size of: ", stringify!(xConnSetup))
    );
    assert_eq!(
        ::std::mem::align_of::<xConnSetup>(),
        4usize,
        concat!("Alignment of ", stringify!(xConnSetup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).release as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).ridBase as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(ridBase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).ridMask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(ridMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).motionBufferSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(motionBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).nbytesVendor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(nbytesVendor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).maxRequestSize as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(maxRequestSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).numRoots as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(numRoots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).numFormats as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(numFormats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).imageByteOrder as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(imageByteOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).bitmapBitOrder as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(bitmapBitOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).bitmapScanlineUnit as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(bitmapScanlineUnit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).bitmapScanlinePad as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(bitmapScanlinePad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).minKeyCode as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(minKeyCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).maxKeyCode as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(maxKeyCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConnSetup>())).pad2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xConnSetup),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xPixmapFormat {
    pub depth: CARD8,
    pub bitsPerPixel: CARD8,
    pub scanLinePad: CARD8,
    pub pad1: CARD8,
    pub pad2: CARD32,
}
#[test]
fn bindgen_test_layout_xPixmapFormat() {
    assert_eq!(
        ::std::mem::size_of::<xPixmapFormat>(),
        8usize,
        concat!("Size of: ", stringify!(xPixmapFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<xPixmapFormat>(),
        4usize,
        concat!("Alignment of ", stringify!(xPixmapFormat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPixmapFormat>())).depth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPixmapFormat),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPixmapFormat>())).bitsPerPixel as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xPixmapFormat),
            "::",
            stringify!(bitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPixmapFormat>())).scanLinePad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xPixmapFormat),
            "::",
            stringify!(scanLinePad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPixmapFormat>())).pad1 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xPixmapFormat),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPixmapFormat>())).pad2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xPixmapFormat),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xDepth {
    pub depth: CARD8,
    pub pad1: CARD8,
    pub nVisuals: CARD16,
    pub pad2: CARD32,
}
#[test]
fn bindgen_test_layout_xDepth() {
    assert_eq!(
        ::std::mem::size_of::<xDepth>(),
        8usize,
        concat!("Size of: ", stringify!(xDepth))
    );
    assert_eq!(
        ::std::mem::align_of::<xDepth>(),
        4usize,
        concat!("Alignment of ", stringify!(xDepth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDepth>())).depth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xDepth),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDepth>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xDepth),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDepth>())).nVisuals as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xDepth),
            "::",
            stringify!(nVisuals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDepth>())).pad2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xDepth),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xVisualType {
    pub visualID: CARD32,
    pub class: CARD8,
    pub bitsPerRGB: CARD8,
    pub colormapEntries: CARD16,
    pub redMask: CARD32,
    pub greenMask: CARD32,
    pub blueMask: CARD32,
    pub pad: CARD32,
}
#[test]
fn bindgen_test_layout_xVisualType() {
    assert_eq!(
        ::std::mem::size_of::<xVisualType>(),
        24usize,
        concat!("Size of: ", stringify!(xVisualType))
    );
    assert_eq!(
        ::std::mem::align_of::<xVisualType>(),
        4usize,
        concat!("Alignment of ", stringify!(xVisualType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xVisualType>())).visualID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xVisualType),
            "::",
            stringify!(visualID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xVisualType>())).class as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xVisualType),
            "::",
            stringify!(class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xVisualType>())).bitsPerRGB as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xVisualType),
            "::",
            stringify!(bitsPerRGB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xVisualType>())).colormapEntries as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xVisualType),
            "::",
            stringify!(colormapEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xVisualType>())).redMask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xVisualType),
            "::",
            stringify!(redMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xVisualType>())).greenMask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xVisualType),
            "::",
            stringify!(greenMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xVisualType>())).blueMask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xVisualType),
            "::",
            stringify!(blueMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xVisualType>())).pad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xVisualType),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xWindowRoot {
    pub windowId: CARD32,
    pub defaultColormap: CARD32,
    pub whitePixel: CARD32,
    pub blackPixel: CARD32,
    pub currentInputMask: CARD32,
    pub pixWidth: CARD16,
    pub pixHeight: CARD16,
    pub mmWidth: CARD16,
    pub mmHeight: CARD16,
    pub minInstalledMaps: CARD16,
    pub maxInstalledMaps: CARD16,
    pub rootVisualID: CARD32,
    pub backingStore: CARD8,
    pub saveUnders: BOOL,
    pub rootDepth: CARD8,
    pub nDepths: CARD8,
}
#[test]
fn bindgen_test_layout_xWindowRoot() {
    assert_eq!(
        ::std::mem::size_of::<xWindowRoot>(),
        40usize,
        concat!("Size of: ", stringify!(xWindowRoot))
    );
    assert_eq!(
        ::std::mem::align_of::<xWindowRoot>(),
        4usize,
        concat!("Alignment of ", stringify!(xWindowRoot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).windowId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(windowId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).defaultColormap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(defaultColormap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).whitePixel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(whitePixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).blackPixel as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(blackPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).currentInputMask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(currentInputMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).pixWidth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(pixWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).pixHeight as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(pixHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).mmWidth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(mmWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).mmHeight as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(mmHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).minInstalledMaps as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(minInstalledMaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).maxInstalledMaps as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(maxInstalledMaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).rootVisualID as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(rootVisualID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).backingStore as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(backingStore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).saveUnders as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(saveUnders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).rootDepth as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(rootDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWindowRoot>())).nDepths as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(xWindowRoot),
            "::",
            stringify!(nDepths)
        )
    );
}
#[doc = " Structure Defns"]
#[doc = "   Structures needed for replies"]
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xTimecoord {
    pub time: CARD32,
    pub x: INT16,
    pub y: INT16,
}
#[test]
fn bindgen_test_layout_xTimecoord() {
    assert_eq!(
        ::std::mem::size_of::<xTimecoord>(),
        8usize,
        concat!("Size of: ", stringify!(xTimecoord))
    );
    assert_eq!(
        ::std::mem::align_of::<xTimecoord>(),
        4usize,
        concat!("Alignment of ", stringify!(xTimecoord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTimecoord>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTimecoord),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTimecoord>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTimecoord),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTimecoord>())).y as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xTimecoord),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xHostEntry {
    pub family: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
}
#[test]
fn bindgen_test_layout_xHostEntry() {
    assert_eq!(
        ::std::mem::size_of::<xHostEntry>(),
        4usize,
        concat!("Size of: ", stringify!(xHostEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<xHostEntry>(),
        2usize,
        concat!("Alignment of ", stringify!(xHostEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xHostEntry>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xHostEntry),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xHostEntry>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xHostEntry),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xHostEntry>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xHostEntry),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCharInfo {
    pub leftSideBearing: INT16,
    pub rightSideBearing: INT16,
    pub characterWidth: INT16,
    pub ascent: INT16,
    pub descent: INT16,
    pub attributes: CARD16,
}
#[test]
fn bindgen_test_layout_xCharInfo() {
    assert_eq!(
        ::std::mem::size_of::<xCharInfo>(),
        12usize,
        concat!("Size of: ", stringify!(xCharInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xCharInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(xCharInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCharInfo>())).leftSideBearing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCharInfo),
            "::",
            stringify!(leftSideBearing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCharInfo>())).rightSideBearing as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCharInfo),
            "::",
            stringify!(rightSideBearing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCharInfo>())).characterWidth as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCharInfo),
            "::",
            stringify!(characterWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCharInfo>())).ascent as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xCharInfo),
            "::",
            stringify!(ascent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCharInfo>())).descent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCharInfo),
            "::",
            stringify!(descent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCharInfo>())).attributes as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xCharInfo),
            "::",
            stringify!(attributes)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xFontProp {
    pub name: CARD32,
    pub value: CARD32,
}
#[test]
fn bindgen_test_layout_xFontProp() {
    assert_eq!(
        ::std::mem::size_of::<xFontProp>(),
        8usize,
        concat!("Size of: ", stringify!(xFontProp))
    );
    assert_eq!(
        ::std::mem::align_of::<xFontProp>(),
        4usize,
        concat!("Alignment of ", stringify!(xFontProp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xFontProp>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xFontProp),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xFontProp>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xFontProp),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xTextElt {
    pub len: CARD8,
    pub delta: INT8,
}
#[test]
fn bindgen_test_layout_xTextElt() {
    assert_eq!(
        ::std::mem::size_of::<xTextElt>(),
        2usize,
        concat!("Size of: ", stringify!(xTextElt))
    );
    assert_eq!(
        ::std::mem::align_of::<xTextElt>(),
        1usize,
        concat!("Alignment of ", stringify!(xTextElt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTextElt>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTextElt),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTextElt>())).delta as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xTextElt),
            "::",
            stringify!(delta)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xColorItem {
    pub pixel: CARD32,
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
    pub flags: CARD8,
    pub pad: CARD8,
}
#[test]
fn bindgen_test_layout_xColorItem() {
    assert_eq!(
        ::std::mem::size_of::<xColorItem>(),
        12usize,
        concat!("Size of: ", stringify!(xColorItem))
    );
    assert_eq!(
        ::std::mem::align_of::<xColorItem>(),
        4usize,
        concat!("Alignment of ", stringify!(xColorItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xColorItem>())).pixel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xColorItem),
            "::",
            stringify!(pixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xColorItem>())).red as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xColorItem),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xColorItem>())).green as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xColorItem),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xColorItem>())).blue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xColorItem),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xColorItem>())).flags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xColorItem),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xColorItem>())).pad as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xColorItem),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xrgb {
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
    pub pad: CARD16,
}
#[test]
fn bindgen_test_layout_xrgb() {
    assert_eq!(
        ::std::mem::size_of::<xrgb>(),
        8usize,
        concat!("Size of: ", stringify!(xrgb))
    );
    assert_eq!(
        ::std::mem::align_of::<xrgb>(),
        2usize,
        concat!("Alignment of ", stringify!(xrgb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xrgb>())).red as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(xrgb), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xrgb>())).green as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xrgb),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xrgb>())).blue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xrgb),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xrgb>())).pad as *const _ as usize },
        6usize,
        concat!("Offset of field: ", stringify!(xrgb), "::", stringify!(pad))
    );
}
pub type KEYCODE = CARD8;
#[doc = " XRep:"]
#[doc = "    meant to be 32 byte quantity"]
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGenericReply {
    pub type_: BYTE,
    pub data1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub data00: CARD32,
    pub data01: CARD32,
    pub data02: CARD32,
    pub data03: CARD32,
    pub data04: CARD32,
    pub data05: CARD32,
}
#[test]
fn bindgen_test_layout_xGenericReply() {
    assert_eq!(
        ::std::mem::size_of::<xGenericReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGenericReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGenericReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGenericReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).data1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).data00 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(data00)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).data01 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(data01)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).data02 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(data02)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).data03 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(data03)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).data04 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(data04)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericReply>())).data05 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericReply),
            "::",
            stringify!(data05)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetWindowAttributesReply {
    pub type_: BYTE,
    pub backingStore: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub visualID: CARD32,
    pub class: CARD16,
    pub bitGravity: CARD8,
    pub winGravity: CARD8,
    pub backingBitPlanes: CARD32,
    pub backingPixel: CARD32,
    pub saveUnder: BOOL,
    pub mapInstalled: BOOL,
    pub mapState: CARD8,
    pub override_: BOOL,
    pub colormap: CARD32,
    pub allEventMasks: CARD32,
    pub yourEventMask: CARD32,
    pub doNotPropagateMask: CARD16,
    pub pad: CARD16,
}
#[test]
fn bindgen_test_layout_xGetWindowAttributesReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetWindowAttributesReply>(),
        44usize,
        concat!("Size of: ", stringify!(xGetWindowAttributesReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetWindowAttributesReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetWindowAttributesReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetWindowAttributesReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).backingStore as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(backingStore)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).sequenceNumber as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).visualID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(visualID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetWindowAttributesReply>())).class as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).bitGravity as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(bitGravity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).winGravity as *const _ as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(winGravity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).backingBitPlanes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(backingBitPlanes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).backingPixel as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(backingPixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).saveUnder as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(saveUnder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).mapInstalled as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(mapInstalled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).mapState as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(mapState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).override_ as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).colormap as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(colormap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).allEventMasks as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(allEventMasks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).yourEventMask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(yourEventMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetWindowAttributesReply>())).doNotPropagateMask as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(doNotPropagateMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetWindowAttributesReply>())).pad as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetWindowAttributesReply),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetGeometryReply {
    pub type_: BYTE,
    pub depth: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub root: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub pad1: CARD16,
    pub pad2: CARD32,
    pub pad3: CARD32,
}
#[test]
fn bindgen_test_layout_xGetGeometryReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetGeometryReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetGeometryReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetGeometryReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetGeometryReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).depth as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetGeometryReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).root as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).y as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).height as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).borderWidth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(borderWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).pad1 as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).pad2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetGeometryReply>())).pad3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetGeometryReply),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryTreeReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub root: CARD32,
    pub parent: CARD32,
    pub nChildren: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
#[test]
fn bindgen_test_layout_xQueryTreeReply() {
    assert_eq!(
        ::std::mem::size_of::<xQueryTreeReply>(),
        32usize,
        concat!("Size of: ", stringify!(xQueryTreeReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryTreeReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryTreeReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).root as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).parent as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).nChildren as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(nChildren)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).pad2 as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).pad3 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).pad4 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTreeReply>())).pad5 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTreeReply),
            "::",
            stringify!(pad5)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xInternAtomReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub atom: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
#[test]
fn bindgen_test_layout_xInternAtomReply() {
    assert_eq!(
        ::std::mem::size_of::<xInternAtomReply>(),
        32usize,
        concat!("Size of: ", stringify!(xInternAtomReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xInternAtomReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xInternAtomReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).atom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).pad2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).pad5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReply>())).pad6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReply),
            "::",
            stringify!(pad6)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetAtomNameReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nameLength: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xGetAtomNameReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetAtomNameReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetAtomNameReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetAtomNameReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetAtomNameReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetAtomNameReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).nameLength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(nameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetAtomNameReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetAtomNameReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetPropertyReply {
    pub type_: BYTE,
    pub format: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub propertyType: CARD32,
    pub bytesAfter: CARD32,
    pub nItems: CARD32,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
}
#[test]
fn bindgen_test_layout_xGetPropertyReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetPropertyReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetPropertyReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetPropertyReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetPropertyReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).format as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetPropertyReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).propertyType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(propertyType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).bytesAfter as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(bytesAfter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).nItems as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(nItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).pad1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).pad2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReply>())).pad3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReply),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xListPropertiesReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nProperties: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xListPropertiesReply() {
    assert_eq!(
        ::std::mem::size_of::<xListPropertiesReply>(),
        32usize,
        concat!("Size of: ", stringify!(xListPropertiesReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xListPropertiesReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xListPropertiesReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListPropertiesReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListPropertiesReply>())).nProperties as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(nProperties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListPropertiesReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xListPropertiesReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetSelectionOwnerReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub owner: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
#[test]
fn bindgen_test_layout_xGetSelectionOwnerReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetSelectionOwnerReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetSelectionOwnerReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetSelectionOwnerReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetSelectionOwnerReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).pad2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).pad5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetSelectionOwnerReply>())).pad6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetSelectionOwnerReply),
            "::",
            stringify!(pad6)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGrabPointerReply {
    pub type_: BYTE,
    pub status: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
#[test]
fn bindgen_test_layout_xGrabPointerReply() {
    assert_eq!(
        ::std::mem::size_of::<xGrabPointerReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGrabPointerReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGrabPointerReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGrabPointerReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).status as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGrabPointerReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).pad1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).pad2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).pad5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReply>())).pad6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReply),
            "::",
            stringify!(pad6)
        )
    );
}
pub type xGrabKeyboardReply = xGrabPointerReply;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryPointerReply {
    pub type_: BYTE,
    pub sameScreen: BOOL,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub root: CARD32,
    pub child: CARD32,
    pub rootX: INT16,
    pub rootY: INT16,
    pub winX: INT16,
    pub winY: INT16,
    pub mask: CARD16,
    pub pad1: CARD16,
    pub pad: CARD32,
}
#[test]
fn bindgen_test_layout_xQueryPointerReply() {
    assert_eq!(
        ::std::mem::size_of::<xQueryPointerReply>(),
        32usize,
        concat!("Size of: ", stringify!(xQueryPointerReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryPointerReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryPointerReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).sameScreen as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(sameScreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryPointerReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).root as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).child as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).rootX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(rootX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).rootY as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(rootY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).winX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(winX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).winY as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(winY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).mask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).pad1 as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryPointerReply>())).pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryPointerReply),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetMotionEventsReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nEvents: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
#[test]
fn bindgen_test_layout_xGetMotionEventsReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetMotionEventsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetMotionEventsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetMotionEventsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetMotionEventsReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetMotionEventsReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).nEvents as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(nEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).pad2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).pad5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReply>())).pad6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReply),
            "::",
            stringify!(pad6)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xTranslateCoordsReply {
    pub type_: BYTE,
    pub sameScreen: BOOL,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub child: CARD32,
    pub dstX: INT16,
    pub dstY: INT16,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
#[test]
fn bindgen_test_layout_xTranslateCoordsReply() {
    assert_eq!(
        ::std::mem::size_of::<xTranslateCoordsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xTranslateCoordsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xTranslateCoordsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xTranslateCoordsReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xTranslateCoordsReply>())).sameScreen as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(sameScreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xTranslateCoordsReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).child as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).dstX as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(dstX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).dstY as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(dstY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).pad2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).pad3 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).pad4 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReply>())).pad5 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReply),
            "::",
            stringify!(pad5)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetInputFocusReply {
    pub type_: BYTE,
    pub revertTo: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub focus: CARD32,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
#[test]
fn bindgen_test_layout_xGetInputFocusReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetInputFocusReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetInputFocusReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetInputFocusReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetInputFocusReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).revertTo as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(revertTo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetInputFocusReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).focus as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(focus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).pad1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).pad2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).pad3 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).pad4 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetInputFocusReply>())).pad5 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetInputFocusReply),
            "::",
            stringify!(pad5)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryKeymapReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub map: [BYTE; 32usize],
}
#[test]
fn bindgen_test_layout_xQueryKeymapReply() {
    assert_eq!(
        ::std::mem::size_of::<xQueryKeymapReply>(),
        40usize,
        concat!("Size of: ", stringify!(xQueryKeymapReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryKeymapReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryKeymapReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryKeymapReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryKeymapReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryKeymapReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryKeymapReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryKeymapReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryKeymapReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryKeymapReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryKeymapReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryKeymapReply>())).map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryKeymapReply),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xQueryFontReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub minBounds: xCharInfo,
    pub walign1: CARD32,
    pub maxBounds: xCharInfo,
    pub walign2: CARD32,
    pub minCharOrByte2: CARD16,
    pub maxCharOrByte2: CARD16,
    pub defaultChar: CARD16,
    pub nFontProps: CARD16,
    pub drawDirection: CARD8,
    pub minByte1: CARD8,
    pub maxByte1: CARD8,
    pub allCharsExist: BOOL,
    pub fontAscent: INT16,
    pub fontDescent: INT16,
    pub nCharInfos: CARD32,
}
#[test]
fn bindgen_test_layout__xQueryFontReply() {
    assert_eq!(
        ::std::mem::size_of::<_xQueryFontReply>(),
        60usize,
        concat!("Size of: ", stringify!(_xQueryFontReply))
    );
    assert_eq!(
        ::std::mem::align_of::<_xQueryFontReply>(),
        4usize,
        concat!("Alignment of ", stringify!(_xQueryFontReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).minBounds as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(minBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).walign1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(walign1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).maxBounds as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(maxBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).walign2 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(walign2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).minCharOrByte2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(minCharOrByte2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).maxCharOrByte2 as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(maxCharOrByte2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).defaultChar as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(defaultChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).nFontProps as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(nFontProps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).drawDirection as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(drawDirection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).minByte1 as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(minByte1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).maxByte1 as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(maxByte1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).allCharsExist as *const _ as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(allCharsExist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).fontAscent as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(fontAscent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).fontDescent as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(fontDescent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xQueryFontReply>())).nCharInfos as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_xQueryFontReply),
            "::",
            stringify!(nCharInfos)
        )
    );
}
pub type xQueryFontReply = _xQueryFontReply;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryTextExtentsReply {
    pub type_: BYTE,
    pub drawDirection: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub fontAscent: INT16,
    pub fontDescent: INT16,
    pub overallAscent: INT16,
    pub overallDescent: INT16,
    pub overallWidth: INT32,
    pub overallLeft: INT32,
    pub overallRight: INT32,
    pub pad: CARD32,
}
#[test]
fn bindgen_test_layout_xQueryTextExtentsReply() {
    assert_eq!(
        ::std::mem::size_of::<xQueryTextExtentsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xQueryTextExtentsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryTextExtentsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryTextExtentsReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTextExtentsReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).drawDirection as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(drawDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTextExtentsReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).fontAscent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(fontAscent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).fontDescent as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(fontDescent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).overallAscent as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(overallAscent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).overallDescent as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(overallDescent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).overallWidth as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(overallWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).overallLeft as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(overallLeft)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryTextExtentsReply>())).overallRight as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(overallRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTextExtentsReply>())).pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReply),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xListFontsReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nFonts: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xListFontsReply() {
    assert_eq!(
        ::std::mem::size_of::<xListFontsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xListFontsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xListFontsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xListFontsReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).nFonts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(nFonts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xListFontsWithInfoReply {
    pub type_: BYTE,
    pub nameLength: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub minBounds: xCharInfo,
    pub walign1: CARD32,
    pub maxBounds: xCharInfo,
    pub walign2: CARD32,
    pub minCharOrByte2: CARD16,
    pub maxCharOrByte2: CARD16,
    pub defaultChar: CARD16,
    pub nFontProps: CARD16,
    pub drawDirection: CARD8,
    pub minByte1: CARD8,
    pub maxByte1: CARD8,
    pub allCharsExist: BOOL,
    pub fontAscent: INT16,
    pub fontDescent: INT16,
    pub nReplies: CARD32,
}
#[test]
fn bindgen_test_layout_xListFontsWithInfoReply() {
    assert_eq!(
        ::std::mem::size_of::<xListFontsWithInfoReply>(),
        60usize,
        concat!("Size of: ", stringify!(xListFontsWithInfoReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xListFontsWithInfoReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xListFontsWithInfoReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsWithInfoReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).nameLength as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(nameLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsWithInfoReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).minBounds as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(minBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsWithInfoReply>())).walign1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(walign1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).maxBounds as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(maxBounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsWithInfoReply>())).walign2 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(walign2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).minCharOrByte2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(minCharOrByte2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).maxCharOrByte2 as *const _ as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(maxCharOrByte2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).defaultChar as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(defaultChar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).nFontProps as *const _ as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(nFontProps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).drawDirection as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(drawDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).minByte1 as *const _ as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(minByte1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).maxByte1 as *const _ as usize
        },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(maxByte1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).allCharsExist as *const _ as usize
        },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(allCharsExist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).fontAscent as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(fontAscent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).fontDescent as *const _ as usize
        },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(fontDescent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListFontsWithInfoReply>())).nReplies as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsWithInfoReply),
            "::",
            stringify!(nReplies)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetFontPathReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nPaths: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xGetFontPathReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetFontPathReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetFontPathReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetFontPathReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetFontPathReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetFontPathReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).nPaths as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(nPaths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetFontPathReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetFontPathReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetImageReply {
    pub type_: BYTE,
    pub depth: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub visual: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xGetImageReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetImageReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetImageReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetImageReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetImageReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).depth as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).visual as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(visual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xListInstalledColormapsReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nColormaps: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xListInstalledColormapsReply() {
    assert_eq!(
        ::std::mem::size_of::<xListInstalledColormapsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xListInstalledColormapsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xListInstalledColormapsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xListInstalledColormapsReply))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).pad1 as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).sequenceNumber as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).nColormaps as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(nColormaps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).pad2 as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).pad3 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).pad4 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).pad5 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).pad6 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListInstalledColormapsReply>())).pad7 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xListInstalledColormapsReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllocColorReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
    pub pad2: CARD16,
    pub pixel: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
#[test]
fn bindgen_test_layout_xAllocColorReply() {
    assert_eq!(
        ::std::mem::size_of::<xAllocColorReply>(),
        32usize,
        concat!("Size of: ", stringify!(xAllocColorReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllocColorReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllocColorReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).red as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).green as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).blue as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).pad2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).pixel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(pixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).pad3 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).pad4 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReply>())).pad5 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReply),
            "::",
            stringify!(pad5)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllocNamedColorReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pixel: CARD32,
    pub exactRed: CARD16,
    pub exactGreen: CARD16,
    pub exactBlue: CARD16,
    pub screenRed: CARD16,
    pub screenGreen: CARD16,
    pub screenBlue: CARD16,
    pub pad2: CARD32,
    pub pad3: CARD32,
}
#[test]
fn bindgen_test_layout_xAllocNamedColorReply() {
    assert_eq!(
        ::std::mem::size_of::<xAllocNamedColorReply>(),
        32usize,
        concat!("Size of: ", stringify!(xAllocNamedColorReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllocNamedColorReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllocNamedColorReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xAllocNamedColorReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).pixel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(pixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).exactRed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(exactRed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xAllocNamedColorReply>())).exactGreen as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(exactGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).exactBlue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(exactBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).screenRed as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(screenRed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xAllocNamedColorReply>())).screenGreen as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(screenGreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xAllocNamedColorReply>())).screenBlue as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(screenBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).pad2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReply>())).pad3 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReply),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllocColorCellsReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nPixels: CARD16,
    pub nMasks: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xAllocColorCellsReply() {
    assert_eq!(
        ::std::mem::size_of::<xAllocColorCellsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xAllocColorCellsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllocColorCellsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllocColorCellsReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xAllocColorCellsReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).nPixels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(nPixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).nMasks as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(nMasks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllocColorPlanesReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nPixels: CARD16,
    pub pad2: CARD16,
    pub redMask: CARD32,
    pub greenMask: CARD32,
    pub blueMask: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
}
#[test]
fn bindgen_test_layout_xAllocColorPlanesReply() {
    assert_eq!(
        ::std::mem::size_of::<xAllocColorPlanesReply>(),
        32usize,
        concat!("Size of: ", stringify!(xAllocColorPlanesReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllocColorPlanesReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllocColorPlanesReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xAllocColorPlanesReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).nPixels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(nPixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).redMask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(redMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xAllocColorPlanesReply>())).greenMask as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(greenMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).blueMask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(blueMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).pad3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReply>())).pad4 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReply),
            "::",
            stringify!(pad4)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryColorsReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nColors: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xQueryColorsReply() {
    assert_eq!(
        ::std::mem::size_of::<xQueryColorsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xQueryColorsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryColorsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryColorsReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryColorsReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).nColors as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(nColors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xLookupColorReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub exactRed: CARD16,
    pub exactGreen: CARD16,
    pub exactBlue: CARD16,
    pub screenRed: CARD16,
    pub screenGreen: CARD16,
    pub screenBlue: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
}
#[test]
fn bindgen_test_layout_xLookupColorReply() {
    assert_eq!(
        ::std::mem::size_of::<xLookupColorReply>(),
        32usize,
        concat!("Size of: ", stringify!(xLookupColorReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xLookupColorReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xLookupColorReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xLookupColorReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).exactRed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(exactRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).exactGreen as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(exactGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).exactBlue as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(exactBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).screenRed as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(screenRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).screenGreen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(screenGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).screenBlue as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(screenBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).pad3 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).pad4 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReply>())).pad5 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReply),
            "::",
            stringify!(pad5)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryBestSizeReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub width: CARD16,
    pub height: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xQueryBestSizeReply() {
    assert_eq!(
        ::std::mem::size_of::<xQueryBestSizeReply>(),
        32usize,
        concat!("Size of: ", stringify!(xQueryBestSizeReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryBestSizeReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryBestSizeReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryBestSizeReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).height as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryExtensionReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub present: BOOL,
    pub major_opcode: CARD8,
    pub first_event: CARD8,
    pub first_error: CARD8,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xQueryExtensionReply() {
    assert_eq!(
        ::std::mem::size_of::<xQueryExtensionReply>(),
        32usize,
        concat!("Size of: ", stringify!(xQueryExtensionReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryExtensionReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryExtensionReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryExtensionReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).present as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(present)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryExtensionReply>())).major_opcode as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(major_opcode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryExtensionReply>())).first_event as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(first_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xQueryExtensionReply>())).first_error as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(first_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xListExtensionsReply {
    pub type_: BYTE,
    pub nExtensions: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xListExtensionsReply() {
    assert_eq!(
        ::std::mem::size_of::<xListExtensionsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xListExtensionsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xListExtensionsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xListExtensionsReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListExtensionsReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListExtensionsReply>())).nExtensions as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(nExtensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xListExtensionsReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListExtensionsReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListExtensionsReply>())).pad2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListExtensionsReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListExtensionsReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListExtensionsReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListExtensionsReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListExtensionsReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xListExtensionsReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetMappingReply {
    pub type_: BYTE,
    pub success: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xSetMappingReply() {
    assert_eq!(
        ::std::mem::size_of::<xSetMappingReply>(),
        32usize,
        concat!("Size of: ", stringify!(xSetMappingReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetMappingReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xSetMappingReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).success as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(success)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).pad2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetMappingReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetMappingReply),
            "::",
            stringify!(pad7)
        )
    );
}
pub type xSetPointerMappingReply = xSetMappingReply;
pub type xSetModifierMappingReply = xSetMappingReply;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetPointerMappingReply {
    pub type_: BYTE,
    pub nElts: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xGetPointerMappingReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetPointerMappingReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetPointerMappingReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetPointerMappingReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetPointerMappingReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).nElts as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(nElts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetPointerMappingReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).pad2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerMappingReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerMappingReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetKeyboardMappingReply {
    pub type_: BYTE,
    pub keySymsPerKeyCode: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xGetKeyboardMappingReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetKeyboardMappingReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetKeyboardMappingReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetKeyboardMappingReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetKeyboardMappingReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).keySymsPerKeyCode as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(keySymsPerKeyCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).pad2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetModifierMappingReply {
    pub type_: BYTE,
    pub numKeyPerModifier: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
#[test]
fn bindgen_test_layout_xGetModifierMappingReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetModifierMappingReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetModifierMappingReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetModifierMappingReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetModifierMappingReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetModifierMappingReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetModifierMappingReply>())).numKeyPerModifier as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(numKeyPerModifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetModifierMappingReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetModifierMappingReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetModifierMappingReply>())).pad1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetModifierMappingReply>())).pad2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetModifierMappingReply>())).pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetModifierMappingReply>())).pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetModifierMappingReply>())).pad5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetModifierMappingReply>())).pad6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetModifierMappingReply),
            "::",
            stringify!(pad6)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetKeyboardControlReply {
    pub type_: BYTE,
    pub globalAutoRepeat: BOOL,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub ledMask: CARD32,
    pub keyClickPercent: CARD8,
    pub bellPercent: CARD8,
    pub bellPitch: CARD16,
    pub bellDuration: CARD16,
    pub pad: CARD16,
    pub map: [BYTE; 32usize],
}
#[test]
fn bindgen_test_layout_xGetKeyboardControlReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetKeyboardControlReply>(),
        52usize,
        concat!("Size of: ", stringify!(xGetKeyboardControlReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetKeyboardControlReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetKeyboardControlReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardControlReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardControlReply>())).globalAutoRepeat as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(globalAutoRepeat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardControlReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardControlReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardControlReply>())).ledMask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(ledMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardControlReply>())).keyClickPercent as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(keyClickPercent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardControlReply>())).bellPercent as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(bellPercent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardControlReply>())).bellPitch as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(bellPitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardControlReply>())).bellDuration as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(bellDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardControlReply>())).pad as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardControlReply>())).map as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardControlReply),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetPointerControlReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub accelNumerator: CARD16,
    pub accelDenominator: CARD16,
    pub threshold: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
#[test]
fn bindgen_test_layout_xGetPointerControlReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetPointerControlReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetPointerControlReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetPointerControlReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetPointerControlReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerControlReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerControlReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetPointerControlReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerControlReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetPointerControlReply>())).accelNumerator as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(accelNumerator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetPointerControlReply>())).accelDenominator as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(accelDenominator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetPointerControlReply>())).threshold as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerControlReply>())).pad2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerControlReply>())).pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerControlReply>())).pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerControlReply>())).pad5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPointerControlReply>())).pad6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPointerControlReply),
            "::",
            stringify!(pad6)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetScreenSaverReply {
    pub type_: BYTE,
    pub pad1: BYTE,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub timeout: CARD16,
    pub interval: CARD16,
    pub preferBlanking: BOOL,
    pub allowExposures: BOOL,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
}
#[test]
fn bindgen_test_layout_xGetScreenSaverReply() {
    assert_eq!(
        ::std::mem::size_of::<xGetScreenSaverReply>(),
        32usize,
        concat!("Size of: ", stringify!(xGetScreenSaverReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetScreenSaverReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetScreenSaverReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetScreenSaverReply>())).sequenceNumber as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).timeout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).interval as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetScreenSaverReply>())).preferBlanking as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(preferBlanking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetScreenSaverReply>())).allowExposures as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(allowExposures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).pad2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).pad5 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetScreenSaverReply>())).pad6 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetScreenSaverReply),
            "::",
            stringify!(pad6)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xListHostsReply {
    pub type_: BYTE,
    pub enabled: BOOL,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub nHosts: CARD16,
    pub pad1: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xListHostsReply() {
    assert_eq!(
        ::std::mem::size_of::<xListHostsReply>(),
        32usize,
        concat!("Size of: ", stringify!(xListHostsReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xListHostsReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xListHostsReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).enabled as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).nHosts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(nHosts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).pad1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReply>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReply),
            "::",
            stringify!(pad7)
        )
    );
}
#[doc = " Xerror"]
#[doc = "    All errors  are 32 bytes"]
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xError {
    pub type_: BYTE,
    pub errorCode: BYTE,
    pub sequenceNumber: CARD16,
    pub resourceID: CARD32,
    pub minorCode: CARD16,
    pub majorCode: CARD8,
    pub pad1: BYTE,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xError() {
    assert_eq!(
        ::std::mem::size_of::<xError>(),
        32usize,
        concat!("Size of: ", stringify!(xError))
    );
    assert_eq!(
        ::std::mem::align_of::<xError>(),
        4usize,
        concat!("Alignment of ", stringify!(xError))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).errorCode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(errorCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).resourceID as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(resourceID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).minorCode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(minorCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).majorCode as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(majorCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).pad1 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xError>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xError),
            "::",
            stringify!(pad7)
        )
    );
}
#[doc = " xEvent"]
#[doc = "    All events are 32 bytes"]
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent {
    pub u: _xEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1 {
    pub u: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_1>,
    pub keyButtonPointer: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_2>,
    pub enterLeave: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_3>,
    pub focus: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_4>,
    pub expose: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_5>,
    pub graphicsExposure: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_6>,
    pub noExposure: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_7>,
    pub visibility: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_8>,
    pub createNotify: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_9>,
    pub destroyNotify: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_10>,
    pub unmapNotify: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_11>,
    pub mapNotify: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_12>,
    pub mapRequest: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_13>,
    pub reparent: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_14>,
    pub configureNotify: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_15>,
    pub configureRequest: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_16>,
    pub gravity: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_17>,
    pub resizeRequest: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_18>,
    pub circulate: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_19>,
    pub property: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_20>,
    pub selectionClear: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_21>,
    pub selectionRequest: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_22>,
    pub selectionNotify: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_23>,
    pub colormap: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_24>,
    pub mappingNotify: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_25>,
    pub clientMessage: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_26>,
    pub bindgen_union_field: [u32; 8usize],
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_1 {
    pub type_: BYTE,
    pub detail: BYTE,
    pub sequenceNumber: CARD16,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_1>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_1>())).detail as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(detail)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_1>())).sequenceNumber
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sequenceNumber)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_2 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub root: CARD32,
    pub event: CARD32,
    pub child: CARD32,
    pub rootX: INT16,
    pub rootY: INT16,
    pub eventX: INT16,
    pub eventY: INT16,
    pub state: KeyButMask,
    pub sameScreen: BOOL,
    pub pad1: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).time as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).root as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).event as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).child as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).rootX as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rootX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).rootY as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rootY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).eventX as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(eventX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).eventY as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(eventY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).state as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).sameScreen as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(sameScreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_2>())).pad1 as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pad1)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_3 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub root: CARD32,
    pub event: CARD32,
    pub child: CARD32,
    pub rootX: INT16,
    pub rootY: INT16,
    pub eventX: INT16,
    pub eventY: INT16,
    pub state: KeyButMask,
    pub mode: BYTE,
    pub flags: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).time as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).root as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).event as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).child as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).rootX as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(rootX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).rootY as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(rootY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).eventX as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(eventX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).eventY as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(eventY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).state as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).mode as *const _
                as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_3>())).flags as *const _
                as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_4 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub mode: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_4>(),
        12usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_4>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_4>())).window as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_4>())).mode as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_4>())).pad1 as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_4>())).pad2 as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_4>())).pad3 as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_5 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub x: CARD16,
    pub y: CARD16,
    pub width: CARD16,
    pub height: CARD16,
    pub count: CARD16,
    pub pad2: CARD16,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_5>(),
        20usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_5>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_5>())).window as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_5>())).x as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_5>())).y as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_5>())).width as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_5>())).height as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_5>())).count as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_5>())).pad2 as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_6 {
    pub pad00: CARD32,
    pub drawable: CARD32,
    pub x: CARD16,
    pub y: CARD16,
    pub width: CARD16,
    pub height: CARD16,
    pub minorEvent: CARD16,
    pub count: CARD16,
    pub majorEvent: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_6>(),
        24usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).drawable as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).x as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).y as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).width as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).height as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).minorEvent as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(minorEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).count as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).majorEvent as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(majorEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).pad1 as *const _
                as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).pad2 as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_6>())).pad3 as *const _
                as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_7 {
    pub pad00: CARD32,
    pub drawable: CARD32,
    pub minorEvent: CARD16,
    pub majorEvent: BYTE,
    pub bpad: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_7>(),
        12usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_7>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_7>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_7>())).drawable as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_7>())).minorEvent as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(minorEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_7>())).majorEvent as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(majorEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_7>())).bpad as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(bpad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_8 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub state: CARD8,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_8() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_8>(),
        12usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_8>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_8>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_8>())).window as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_8>())).state as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_8>())).pad1 as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_8>())).pad2 as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_8>())).pad3 as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_9 {
    pub pad00: CARD32,
    pub parent: CARD32,
    pub window: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub override_: BOOL,
    pub bpad: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_9() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_9>(),
        24usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_9>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).parent as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).x as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).y as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).width as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).height as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).borderWidth as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(borderWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).override_ as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_9>())).bpad as *const _
                as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(bpad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_10 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_10() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_10>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_10>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_10>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_10>())).event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_10>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_11 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub fromConfigure: BOOL,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_11() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_11>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_11>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_11>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_11>())).event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_11>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_11>())).fromConfigure
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(fromConfigure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_11>())).pad1 as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_11>())).pad2 as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_11>())).pad3 as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_12 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub override_: BOOL,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_12() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_12>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_12>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_12>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_12>())).event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_12>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_12>())).override_ as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_12>())).pad1 as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_12>())).pad2 as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_12>())).pad3 as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_13 {
    pub pad00: CARD32,
    pub parent: CARD32,
    pub window: CARD32,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_13() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_13>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_13>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_13>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_13>())).parent as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_13>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_13),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_14 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub parent: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub override_: BOOL,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_14() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_14>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_14>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).parent as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).x as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).y as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).override_ as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).pad1 as *const _
                as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).pad2 as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_14>())).pad3 as *const _
                as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_14),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_15 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub aboveSibling: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub override_: BOOL,
    pub bpad: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_15() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_15>(),
        28usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_15>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).aboveSibling
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(aboveSibling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).x as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).y as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).width as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).height as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).borderWidth as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(borderWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).override_ as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_15>())).bpad as *const _
                as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_15),
            "::",
            stringify!(bpad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_16 {
    pub pad00: CARD32,
    pub parent: CARD32,
    pub window: CARD32,
    pub sibling: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub valueMask: CARD16,
    pub pad1: CARD32,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_16() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_16>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_16>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).parent as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).sibling as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(sibling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).x as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).y as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).width as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).height as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).borderWidth as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(borderWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).valueMask as *const _
                as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(valueMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_16>())).pad1 as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_16),
            "::",
            stringify!(pad1)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_17 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub pad1: CARD32,
    pub pad2: CARD32,
    pub pad3: CARD32,
    pub pad4: CARD32,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_17() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_17>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_17>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).x as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).y as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).pad1 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).pad2 as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).pad3 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_17>())).pad4 as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_17),
            "::",
            stringify!(pad4)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_18 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub width: CARD16,
    pub height: CARD16,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_18() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_18>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_18)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_18>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_18>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_18),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_18>())).window as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_18),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_18>())).width as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_18),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_18>())).height as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_18),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_19 {
    pub pad00: CARD32,
    pub event: CARD32,
    pub window: CARD32,
    pub parent: CARD32,
    pub place: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_19() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_19>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_19>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_19>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_19>())).event as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_19>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_19>())).parent as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_19>())).place as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(place)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_19>())).pad1 as *const _
                as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_19>())).pad2 as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_19>())).pad3 as *const _
                as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_19),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_20 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub atom: CARD32,
    pub time: CARD32,
    pub state: BYTE,
    pub pad1: BYTE,
    pub pad2: CARD16,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_20() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_20>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_20>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_20>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_20>())).window as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_20>())).atom as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_20>())).time as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_20>())).state as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_20>())).pad1 as *const _
                as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_20>())).pad2 as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_20),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_21 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub window: CARD32,
    pub atom: CARD32,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_21() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_21>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_21)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_21>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_21>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_21),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_21>())).time as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_21),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_21>())).window as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_21),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_21>())).atom as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_21),
            "::",
            stringify!(atom)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_22 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub owner: CARD32,
    pub requestor: CARD32,
    pub selection: CARD32,
    pub target: CARD32,
    pub property: CARD32,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_22() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_22>(),
        28usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_22>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_22>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_22>())).time as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_22>())).owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_22>())).requestor as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(requestor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_22>())).selection as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(selection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_22>())).target as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_22>())).property as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_22),
            "::",
            stringify!(property)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_23 {
    pub pad00: CARD32,
    pub time: CARD32,
    pub requestor: CARD32,
    pub selection: CARD32,
    pub target: CARD32,
    pub property: CARD32,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_23() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_23>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_23)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_23>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_23>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_23),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_23>())).time as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_23),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_23>())).requestor as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_23),
            "::",
            stringify!(requestor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_23>())).selection as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_23),
            "::",
            stringify!(selection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_23>())).target as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_23),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_23>())).property as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_23),
            "::",
            stringify!(property)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_24 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub colormap: CARD32,
    pub new: BOOL,
    pub state: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_24() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_24>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_24>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_24>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_24>())).window as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_24>())).colormap as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(colormap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_24>())).new as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_24>())).state as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_24>())).pad1 as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_24>())).pad2 as *const _
                as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_24),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_25 {
    pub pad00: CARD32,
    pub request: CARD8,
    pub firstKeyCode: CARD8,
    pub count: CARD8,
    pub pad1: BYTE,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_25() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_25>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_25)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_25>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_25>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_25),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_25>())).request as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_25),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_25>())).firstKeyCode
                as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_25),
            "::",
            stringify!(firstKeyCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_25>())).count as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_25),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_25>())).pad1 as *const _
                as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_25),
            "::",
            stringify!(pad1)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_26 {
    pub pad00: CARD32,
    pub window: CARD32,
    pub u: _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1,
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1 {
    pub l: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1>,
    pub s: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2>,
    pub b: __BindgenUnionField<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3>,
    pub bindgen_union_field: [u32; 6usize],
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1 {
    pub type_: CARD32,
    pub longs0: INT32,
    pub longs1: INT32,
    pub longs2: INT32,
    pub longs3: INT32,
    pub longs4: INT32,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1 > ())) . type_ as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1 > ())) . longs0 as * const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(longs0)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1 > ())) . longs1 as * const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(longs1)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1 > ())) . longs2 as * const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(longs2)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1 > ())) . longs3 as * const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(longs3)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1 > ())) . longs4 as * const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(longs4)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 {
    pub type_: CARD32,
    pub shorts0: INT16,
    pub shorts1: INT16,
    pub shorts2: INT16,
    pub shorts3: INT16,
    pub shorts4: INT16,
    pub shorts5: INT16,
    pub shorts6: INT16,
    pub shorts7: INT16,
    pub shorts8: INT16,
    pub shorts9: INT16,
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . type_ as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts0 as * const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts0)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts1 as * const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts1)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts2 as * const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts2)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts3 as * const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts3)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts4 as * const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts4)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts5 as * const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts5)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts6 as * const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts6)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts7 as * const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts7)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts8 as * const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts8)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2 > ())) . shorts9 as * const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(shorts9)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3 {
    pub type_: CARD32,
    pub bytes: [INT8; 20usize],
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3 > ())) . type_ as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            & (* (:: std :: ptr :: null :: < _xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3 > ())) . bytes as * const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(bytes)
        )
    );
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1>())).l
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1>())).s
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1>())).b
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1__bindgen_ty_26() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1__bindgen_ty_26>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1__bindgen_ty_26>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_26>())).pad00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(pad00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_26>())).window as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1__bindgen_ty_26>())).u as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1__bindgen_ty_26),
            "::",
            stringify!(u)
        )
    );
}
#[test]
fn bindgen_test_layout__xEvent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(_xEvent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_xEvent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).keyButtonPointer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(keyButtonPointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).enterLeave as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(enterLeave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).focus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(focus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).expose as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(expose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).graphicsExposure as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(graphicsExposure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).noExposure as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(noExposure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).visibility as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(visibility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).createNotify as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(createNotify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).destroyNotify as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(destroyNotify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).unmapNotify as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(unmapNotify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).mapNotify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(mapNotify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).mapRequest as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(mapRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).reparent as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(reparent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).configureNotify as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(configureNotify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).configureRequest as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(configureRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).gravity as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(gravity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).resizeRequest as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(resizeRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).circulate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(circulate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).property as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).selectionClear as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(selectionClear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).selectionRequest as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(selectionRequest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).selectionNotify as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(selectionNotify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).colormap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(colormap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).mappingNotify as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(mappingNotify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xEvent__bindgen_ty_1>())).clientMessage as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent__bindgen_ty_1),
            "::",
            stringify!(clientMessage)
        )
    );
}
#[test]
fn bindgen_test_layout__xEvent() {
    assert_eq!(
        ::std::mem::size_of::<_xEvent>(),
        32usize,
        concat!("Size of: ", stringify!(_xEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<_xEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(_xEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xEvent>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xEvent),
            "::",
            stringify!(u)
        )
    );
}
#[doc = " xEvent"]
#[doc = "    All events are 32 bytes"]
pub type xEvent = _xEvent;
#[doc = " Generic event"]
#[doc = ""]
#[doc = " Those events are not part of the core protocol spec and can be used by"]
#[doc = " various extensions."]
#[doc = " type is always GenericEvent"]
#[doc = " extension is the minor opcode of the extension the event belongs to."]
#[doc = " evtype is the actual event type, unique __per extension__."]
#[doc = ""]
#[doc = " GenericEvents can be longer than 32 bytes, with the length field"]
#[doc = " specifying the number of 4 byte blocks after the first 32 bytes."]
#[doc = ""]
#[doc = ""]
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGenericEvent {
    pub type_: BYTE,
    pub extension: CARD8,
    pub sequenceNumber: CARD16,
    pub length: CARD32,
    pub evtype: CARD16,
    pub pad2: CARD16,
    pub pad3: CARD32,
    pub pad4: CARD32,
    pub pad5: CARD32,
    pub pad6: CARD32,
    pub pad7: CARD32,
}
#[test]
fn bindgen_test_layout_xGenericEvent() {
    assert_eq!(
        ::std::mem::size_of::<xGenericEvent>(),
        32usize,
        concat!("Size of: ", stringify!(xGenericEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<xGenericEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(xGenericEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).extension as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).sequenceNumber as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(sequenceNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).evtype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(evtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).pad4 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).pad5 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).pad6 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGenericEvent>())).pad7 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xGenericEvent),
            "::",
            stringify!(pad7)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xKeymapEvent {
    pub type_: BYTE,
    pub map: [BYTE; 31usize],
}
#[test]
fn bindgen_test_layout_xKeymapEvent() {
    assert_eq!(
        ::std::mem::size_of::<xKeymapEvent>(),
        32usize,
        concat!("Size of: ", stringify!(xKeymapEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<xKeymapEvent>(),
        1usize,
        concat!("Alignment of ", stringify!(xKeymapEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xKeymapEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xKeymapEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xKeymapEvent>())).map as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xKeymapEvent),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xReply {
    pub generic: __BindgenUnionField<xGenericReply>,
    pub geom: __BindgenUnionField<xGetGeometryReply>,
    pub tree: __BindgenUnionField<xQueryTreeReply>,
    pub atom: __BindgenUnionField<xInternAtomReply>,
    pub atomName: __BindgenUnionField<xGetAtomNameReply>,
    pub property: __BindgenUnionField<xGetPropertyReply>,
    pub listProperties: __BindgenUnionField<xListPropertiesReply>,
    pub selection: __BindgenUnionField<xGetSelectionOwnerReply>,
    pub grabPointer: __BindgenUnionField<xGrabPointerReply>,
    pub grabKeyboard: __BindgenUnionField<xGrabKeyboardReply>,
    pub pointer: __BindgenUnionField<xQueryPointerReply>,
    pub motionEvents: __BindgenUnionField<xGetMotionEventsReply>,
    pub coords: __BindgenUnionField<xTranslateCoordsReply>,
    pub inputFocus: __BindgenUnionField<xGetInputFocusReply>,
    pub textExtents: __BindgenUnionField<xQueryTextExtentsReply>,
    pub fonts: __BindgenUnionField<xListFontsReply>,
    pub fontPath: __BindgenUnionField<xGetFontPathReply>,
    pub image: __BindgenUnionField<xGetImageReply>,
    pub colormaps: __BindgenUnionField<xListInstalledColormapsReply>,
    pub allocColor: __BindgenUnionField<xAllocColorReply>,
    pub allocNamedColor: __BindgenUnionField<xAllocNamedColorReply>,
    pub colorCells: __BindgenUnionField<xAllocColorCellsReply>,
    pub colorPlanes: __BindgenUnionField<xAllocColorPlanesReply>,
    pub colors: __BindgenUnionField<xQueryColorsReply>,
    pub lookupColor: __BindgenUnionField<xLookupColorReply>,
    pub bestSize: __BindgenUnionField<xQueryBestSizeReply>,
    pub extension: __BindgenUnionField<xQueryExtensionReply>,
    pub extensions: __BindgenUnionField<xListExtensionsReply>,
    pub setModifierMapping: __BindgenUnionField<xSetModifierMappingReply>,
    pub getModifierMapping: __BindgenUnionField<xGetModifierMappingReply>,
    pub setPointerMapping: __BindgenUnionField<xSetPointerMappingReply>,
    pub getKeyboardMapping: __BindgenUnionField<xGetKeyboardMappingReply>,
    pub getPointerMapping: __BindgenUnionField<xGetPointerMappingReply>,
    pub pointerControl: __BindgenUnionField<xGetPointerControlReply>,
    pub screenSaver: __BindgenUnionField<xGetScreenSaverReply>,
    pub hosts: __BindgenUnionField<xListHostsReply>,
    pub error: __BindgenUnionField<xError>,
    pub event: __BindgenUnionField<xEvent>,
    pub bindgen_union_field: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_xReply() {
    assert_eq!(
        ::std::mem::size_of::<xReply>(),
        32usize,
        concat!("Size of: ", stringify!(xReply))
    );
    assert_eq!(
        ::std::mem::align_of::<xReply>(),
        4usize,
        concat!("Alignment of ", stringify!(xReply))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).generic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(generic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).geom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(geom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).tree as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).atom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).atomName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(atomName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).property as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(property)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).listProperties as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(listProperties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).selection as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(selection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).grabPointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(grabPointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).grabKeyboard as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(grabKeyboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).pointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).motionEvents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(motionEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).coords as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(coords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).inputFocus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(inputFocus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).textExtents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(textExtents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).fonts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(fonts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).fontPath as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(fontPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).colormaps as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(colormaps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).allocColor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(allocColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).allocNamedColor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(allocNamedColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).colorCells as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(colorCells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).colorPlanes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(colorPlanes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).colors as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).lookupColor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(lookupColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).bestSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(bestSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).extension as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).extensions as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).setModifierMapping as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(setModifierMapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).getModifierMapping as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(getModifierMapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).setPointerMapping as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(setPointerMapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).getKeyboardMapping as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(getKeyboardMapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).getPointerMapping as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(getPointerMapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).pointerControl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(pointerControl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).screenSaver as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(screenSaver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).hosts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(hosts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReply>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReply),
            "::",
            stringify!(event)
        )
    );
}
#[doc = " REQUESTS"]
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _xReq {
    pub reqType: CARD8,
    pub data: CARD8,
    pub length: CARD16,
}
#[test]
fn bindgen_test_layout__xReq() {
    assert_eq!(
        ::std::mem::size_of::<_xReq>(),
        4usize,
        concat!("Size of: ", stringify!(_xReq))
    );
    assert_eq!(
        ::std::mem::align_of::<_xReq>(),
        2usize,
        concat!("Alignment of ", stringify!(_xReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xReq>())).data as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_xReq),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_xReq),
            "::",
            stringify!(length)
        )
    );
}
#[doc = " REQUESTS"]
pub type xReq = _xReq;
#[doc = "  structures that follow request."]
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xResourceReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub id: CARD32,
}
#[test]
fn bindgen_test_layout_xResourceReq() {
    assert_eq!(
        ::std::mem::size_of::<xResourceReq>(),
        8usize,
        concat!("Size of: ", stringify!(xResourceReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xResourceReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xResourceReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xResourceReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xResourceReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xResourceReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xResourceReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xResourceReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xResourceReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xResourceReq>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xResourceReq),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCreateWindowReq {
    pub reqType: CARD8,
    pub depth: CARD8,
    pub length: CARD16,
    pub wid: CARD32,
    pub parent: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub borderWidth: CARD16,
    pub class: CARD16,
    pub visual: CARD32,
    pub mask: CARD32,
}
#[test]
fn bindgen_test_layout_xCreateWindowReq() {
    assert_eq!(
        ::std::mem::size_of::<xCreateWindowReq>(),
        32usize,
        concat!("Size of: ", stringify!(xCreateWindowReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCreateWindowReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCreateWindowReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).depth as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).wid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(wid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).parent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).y as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).height as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).borderWidth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(borderWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).class as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).visual as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(visual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateWindowReq>())).mask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateWindowReq),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangeWindowAttributesReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub valueMask: CARD32,
}
#[test]
fn bindgen_test_layout_xChangeWindowAttributesReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangeWindowAttributesReq>(),
        12usize,
        concat!("Size of: ", stringify!(xChangeWindowAttributesReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangeWindowAttributesReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xChangeWindowAttributesReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeWindowAttributesReq>())).reqType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeWindowAttributesReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeWindowAttributesReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeWindowAttributesReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeWindowAttributesReq>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeWindowAttributesReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeWindowAttributesReq>())).window as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeWindowAttributesReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeWindowAttributesReq>())).valueMask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeWindowAttributesReq),
            "::",
            stringify!(valueMask)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangeSaveSetReq {
    pub reqType: CARD8,
    pub mode: BYTE,
    pub length: CARD16,
    pub window: CARD32,
}
#[test]
fn bindgen_test_layout_xChangeSaveSetReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangeSaveSetReq>(),
        8usize,
        concat!("Size of: ", stringify!(xChangeSaveSetReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangeSaveSetReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xChangeSaveSetReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeSaveSetReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeSaveSetReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeSaveSetReq>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeSaveSetReq),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeSaveSetReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeSaveSetReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeSaveSetReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeSaveSetReq),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xReparentWindowReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub parent: CARD32,
    pub x: INT16,
    pub y: INT16,
}
#[test]
fn bindgen_test_layout_xReparentWindowReq() {
    assert_eq!(
        ::std::mem::size_of::<xReparentWindowReq>(),
        16usize,
        concat!("Size of: ", stringify!(xReparentWindowReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xReparentWindowReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xReparentWindowReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReparentWindowReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xReparentWindowReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReparentWindowReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xReparentWindowReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReparentWindowReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xReparentWindowReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReparentWindowReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xReparentWindowReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReparentWindowReq>())).parent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xReparentWindowReq),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReparentWindowReq>())).x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xReparentWindowReq),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xReparentWindowReq>())).y as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xReparentWindowReq),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xConfigureWindowReq {
    pub reqType: CARD8,
    pub pad: CARD8,
    pub length: CARD16,
    pub window: CARD32,
    pub mask: CARD16,
    pub pad2: CARD16,
}
#[test]
fn bindgen_test_layout_xConfigureWindowReq() {
    assert_eq!(
        ::std::mem::size_of::<xConfigureWindowReq>(),
        12usize,
        concat!("Size of: ", stringify!(xConfigureWindowReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xConfigureWindowReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xConfigureWindowReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConfigureWindowReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xConfigureWindowReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConfigureWindowReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xConfigureWindowReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConfigureWindowReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xConfigureWindowReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConfigureWindowReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xConfigureWindowReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConfigureWindowReq>())).mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xConfigureWindowReq),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConfigureWindowReq>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xConfigureWindowReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCirculateWindowReq {
    pub reqType: CARD8,
    pub direction: CARD8,
    pub length: CARD16,
    pub window: CARD32,
}
#[test]
fn bindgen_test_layout_xCirculateWindowReq() {
    assert_eq!(
        ::std::mem::size_of::<xCirculateWindowReq>(),
        8usize,
        concat!("Size of: ", stringify!(xCirculateWindowReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCirculateWindowReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCirculateWindowReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCirculateWindowReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCirculateWindowReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCirculateWindowReq>())).direction as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCirculateWindowReq),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCirculateWindowReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCirculateWindowReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCirculateWindowReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCirculateWindowReq),
            "::",
            stringify!(window)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xInternAtomReq {
    pub reqType: CARD8,
    pub onlyIfExists: BOOL,
    pub length: CARD16,
    pub nbytes: CARD16,
    pub pad: CARD16,
}
#[test]
fn bindgen_test_layout_xInternAtomReq() {
    assert_eq!(
        ::std::mem::size_of::<xInternAtomReq>(),
        8usize,
        concat!("Size of: ", stringify!(xInternAtomReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xInternAtomReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xInternAtomReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReq>())).onlyIfExists as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReq),
            "::",
            stringify!(onlyIfExists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReq>())).nbytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReq),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xInternAtomReq>())).pad as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xInternAtomReq),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangePropertyReq {
    pub reqType: CARD8,
    pub mode: CARD8,
    pub length: CARD16,
    pub window: CARD32,
    pub property: CARD32,
    pub type_: CARD32,
    pub format: CARD8,
    pub pad: [BYTE; 3usize],
    pub nUnits: CARD32,
}
#[test]
fn bindgen_test_layout_xChangePropertyReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangePropertyReq>(),
        24usize,
        concat!("Size of: ", stringify!(xChangePropertyReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangePropertyReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xChangePropertyReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).property as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(property)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).pad as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePropertyReq>())).nUnits as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePropertyReq),
            "::",
            stringify!(nUnits)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xDeletePropertyReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub property: CARD32,
}
#[test]
fn bindgen_test_layout_xDeletePropertyReq() {
    assert_eq!(
        ::std::mem::size_of::<xDeletePropertyReq>(),
        12usize,
        concat!("Size of: ", stringify!(xDeletePropertyReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xDeletePropertyReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xDeletePropertyReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDeletePropertyReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xDeletePropertyReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDeletePropertyReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xDeletePropertyReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDeletePropertyReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xDeletePropertyReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDeletePropertyReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xDeletePropertyReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xDeletePropertyReq>())).property as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xDeletePropertyReq),
            "::",
            stringify!(property)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetPropertyReq {
    pub reqType: CARD8,
    pub delete: BOOL,
    pub length: CARD16,
    pub window: CARD32,
    pub property: CARD32,
    pub type_: CARD32,
    pub longOffset: CARD32,
    pub longLength: CARD32,
}
#[test]
fn bindgen_test_layout_xGetPropertyReq() {
    assert_eq!(
        ::std::mem::size_of::<xGetPropertyReq>(),
        24usize,
        concat!("Size of: ", stringify!(xGetPropertyReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetPropertyReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetPropertyReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReq>())).delete as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReq),
            "::",
            stringify!(delete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReq>())).property as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReq),
            "::",
            stringify!(property)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReq>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReq),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReq>())).longOffset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReq),
            "::",
            stringify!(longOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetPropertyReq>())).longLength as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetPropertyReq),
            "::",
            stringify!(longLength)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetSelectionOwnerReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub selection: CARD32,
    pub time: CARD32,
}
#[test]
fn bindgen_test_layout_xSetSelectionOwnerReq() {
    assert_eq!(
        ::std::mem::size_of::<xSetSelectionOwnerReq>(),
        16usize,
        concat!("Size of: ", stringify!(xSetSelectionOwnerReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetSelectionOwnerReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xSetSelectionOwnerReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetSelectionOwnerReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetSelectionOwnerReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetSelectionOwnerReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetSelectionOwnerReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetSelectionOwnerReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetSelectionOwnerReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetSelectionOwnerReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetSelectionOwnerReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetSelectionOwnerReq>())).selection as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetSelectionOwnerReq),
            "::",
            stringify!(selection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetSelectionOwnerReq>())).time as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetSelectionOwnerReq),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xConvertSelectionReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub requestor: CARD32,
    pub selection: CARD32,
    pub target: CARD32,
    pub property: CARD32,
    pub time: CARD32,
}
#[test]
fn bindgen_test_layout_xConvertSelectionReq() {
    assert_eq!(
        ::std::mem::size_of::<xConvertSelectionReq>(),
        24usize,
        concat!("Size of: ", stringify!(xConvertSelectionReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xConvertSelectionReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xConvertSelectionReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConvertSelectionReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xConvertSelectionReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConvertSelectionReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xConvertSelectionReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConvertSelectionReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xConvertSelectionReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConvertSelectionReq>())).requestor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xConvertSelectionReq),
            "::",
            stringify!(requestor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConvertSelectionReq>())).selection as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xConvertSelectionReq),
            "::",
            stringify!(selection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConvertSelectionReq>())).target as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xConvertSelectionReq),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConvertSelectionReq>())).property as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xConvertSelectionReq),
            "::",
            stringify!(property)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xConvertSelectionReq>())).time as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xConvertSelectionReq),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSendEventReq {
    pub reqType: CARD8,
    pub propagate: BOOL,
    pub length: CARD16,
    pub destination: CARD32,
    pub eventMask: CARD32,
    pub event: xEvent,
}
#[test]
fn bindgen_test_layout_xSendEventReq() {
    assert_eq!(
        ::std::mem::size_of::<xSendEventReq>(),
        44usize,
        concat!("Size of: ", stringify!(xSendEventReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSendEventReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xSendEventReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSendEventReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSendEventReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSendEventReq>())).propagate as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSendEventReq),
            "::",
            stringify!(propagate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSendEventReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSendEventReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSendEventReq>())).destination as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSendEventReq),
            "::",
            stringify!(destination)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSendEventReq>())).eventMask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSendEventReq),
            "::",
            stringify!(eventMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSendEventReq>())).event as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xSendEventReq),
            "::",
            stringify!(event)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGrabPointerReq {
    pub reqType: CARD8,
    pub ownerEvents: BOOL,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub eventMask: CARD16,
    pub pointerMode: BYTE,
    pub keyboardMode: BYTE,
    pub confineTo: CARD32,
    pub cursor: CARD32,
    pub time: CARD32,
}
#[test]
fn bindgen_test_layout_xGrabPointerReq() {
    assert_eq!(
        ::std::mem::size_of::<xGrabPointerReq>(),
        24usize,
        concat!("Size of: ", stringify!(xGrabPointerReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xGrabPointerReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xGrabPointerReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).ownerEvents as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(ownerEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).grabWindow as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(grabWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).eventMask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(eventMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).pointerMode as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(pointerMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).keyboardMode as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(keyboardMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).confineTo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(confineTo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).cursor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabPointerReq>())).time as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabPointerReq),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGrabButtonReq {
    pub reqType: CARD8,
    pub ownerEvents: BOOL,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub eventMask: CARD16,
    pub pointerMode: BYTE,
    pub keyboardMode: BYTE,
    pub confineTo: CARD32,
    pub cursor: CARD32,
    pub button: CARD8,
    pub pad: BYTE,
    pub modifiers: CARD16,
}
#[test]
fn bindgen_test_layout_xGrabButtonReq() {
    assert_eq!(
        ::std::mem::size_of::<xGrabButtonReq>(),
        24usize,
        concat!("Size of: ", stringify!(xGrabButtonReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xGrabButtonReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xGrabButtonReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).ownerEvents as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(ownerEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).grabWindow as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(grabWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).eventMask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(eventMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).pointerMode as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(pointerMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).keyboardMode as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(keyboardMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).confineTo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(confineTo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).cursor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).button as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).pad as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabButtonReq>())).modifiers as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabButtonReq),
            "::",
            stringify!(modifiers)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xUngrabButtonReq {
    pub reqType: CARD8,
    pub button: CARD8,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub modifiers: CARD16,
    pub pad: CARD16,
}
#[test]
fn bindgen_test_layout_xUngrabButtonReq() {
    assert_eq!(
        ::std::mem::size_of::<xUngrabButtonReq>(),
        12usize,
        concat!("Size of: ", stringify!(xUngrabButtonReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xUngrabButtonReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xUngrabButtonReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabButtonReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabButtonReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabButtonReq>())).button as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabButtonReq),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabButtonReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabButtonReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabButtonReq>())).grabWindow as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabButtonReq),
            "::",
            stringify!(grabWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabButtonReq>())).modifiers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabButtonReq),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabButtonReq>())).pad as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabButtonReq),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangeActivePointerGrabReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cursor: CARD32,
    pub time: CARD32,
    pub eventMask: CARD16,
    pub pad2: CARD16,
}
#[test]
fn bindgen_test_layout_xChangeActivePointerGrabReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangeActivePointerGrabReq>(),
        16usize,
        concat!("Size of: ", stringify!(xChangeActivePointerGrabReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangeActivePointerGrabReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xChangeActivePointerGrabReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeActivePointerGrabReq>())).reqType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeActivePointerGrabReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeActivePointerGrabReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeActivePointerGrabReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeActivePointerGrabReq>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeActivePointerGrabReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeActivePointerGrabReq>())).cursor as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeActivePointerGrabReq),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeActivePointerGrabReq>())).time as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeActivePointerGrabReq),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeActivePointerGrabReq>())).eventMask as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeActivePointerGrabReq),
            "::",
            stringify!(eventMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeActivePointerGrabReq>())).pad2 as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeActivePointerGrabReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGrabKeyboardReq {
    pub reqType: CARD8,
    pub ownerEvents: BOOL,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub time: CARD32,
    pub pointerMode: BYTE,
    pub keyboardMode: BYTE,
    pub pad: CARD16,
}
#[test]
fn bindgen_test_layout_xGrabKeyboardReq() {
    assert_eq!(
        ::std::mem::size_of::<xGrabKeyboardReq>(),
        16usize,
        concat!("Size of: ", stringify!(xGrabKeyboardReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xGrabKeyboardReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xGrabKeyboardReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyboardReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyboardReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyboardReq>())).ownerEvents as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyboardReq),
            "::",
            stringify!(ownerEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyboardReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyboardReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyboardReq>())).grabWindow as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyboardReq),
            "::",
            stringify!(grabWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyboardReq>())).time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyboardReq),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyboardReq>())).pointerMode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyboardReq),
            "::",
            stringify!(pointerMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyboardReq>())).keyboardMode as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyboardReq),
            "::",
            stringify!(keyboardMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyboardReq>())).pad as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyboardReq),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGrabKeyReq {
    pub reqType: CARD8,
    pub ownerEvents: BOOL,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub modifiers: CARD16,
    pub key: CARD8,
    pub pointerMode: BYTE,
    pub keyboardMode: BYTE,
    pub pad1: BYTE,
    pub pad2: BYTE,
    pub pad3: BYTE,
}
#[test]
fn bindgen_test_layout_xGrabKeyReq() {
    assert_eq!(
        ::std::mem::size_of::<xGrabKeyReq>(),
        16usize,
        concat!("Size of: ", stringify!(xGrabKeyReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xGrabKeyReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xGrabKeyReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).ownerEvents as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(ownerEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).grabWindow as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(grabWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).modifiers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).key as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).pointerMode as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(pointerMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).keyboardMode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(keyboardMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).pad1 as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).pad2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGrabKeyReq>())).pad3 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(xGrabKeyReq),
            "::",
            stringify!(pad3)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xUngrabKeyReq {
    pub reqType: CARD8,
    pub key: CARD8,
    pub length: CARD16,
    pub grabWindow: CARD32,
    pub modifiers: CARD16,
    pub pad: CARD16,
}
#[test]
fn bindgen_test_layout_xUngrabKeyReq() {
    assert_eq!(
        ::std::mem::size_of::<xUngrabKeyReq>(),
        12usize,
        concat!("Size of: ", stringify!(xUngrabKeyReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xUngrabKeyReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xUngrabKeyReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabKeyReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabKeyReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabKeyReq>())).key as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabKeyReq),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabKeyReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabKeyReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabKeyReq>())).grabWindow as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabKeyReq),
            "::",
            stringify!(grabWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabKeyReq>())).modifiers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabKeyReq),
            "::",
            stringify!(modifiers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xUngrabKeyReq>())).pad as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xUngrabKeyReq),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllowEventsReq {
    pub reqType: CARD8,
    pub mode: CARD8,
    pub length: CARD16,
    pub time: CARD32,
}
#[test]
fn bindgen_test_layout_xAllowEventsReq() {
    assert_eq!(
        ::std::mem::size_of::<xAllowEventsReq>(),
        8usize,
        concat!("Size of: ", stringify!(xAllowEventsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllowEventsReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllowEventsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllowEventsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllowEventsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllowEventsReq>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllowEventsReq),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllowEventsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllowEventsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllowEventsReq>())).time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllowEventsReq),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetMotionEventsReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub start: CARD32,
    pub stop: CARD32,
}
#[test]
fn bindgen_test_layout_xGetMotionEventsReq() {
    assert_eq!(
        ::std::mem::size_of::<xGetMotionEventsReq>(),
        16usize,
        concat!("Size of: ", stringify!(xGetMotionEventsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetMotionEventsReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetMotionEventsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReq>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReq),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetMotionEventsReq>())).stop as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetMotionEventsReq),
            "::",
            stringify!(stop)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xTranslateCoordsReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcWid: CARD32,
    pub dstWid: CARD32,
    pub srcX: INT16,
    pub srcY: INT16,
}
#[test]
fn bindgen_test_layout_xTranslateCoordsReq() {
    assert_eq!(
        ::std::mem::size_of::<xTranslateCoordsReq>(),
        16usize,
        concat!("Size of: ", stringify!(xTranslateCoordsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xTranslateCoordsReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xTranslateCoordsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReq>())).srcWid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReq),
            "::",
            stringify!(srcWid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReq>())).dstWid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReq),
            "::",
            stringify!(dstWid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReq>())).srcX as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReq),
            "::",
            stringify!(srcX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xTranslateCoordsReq>())).srcY as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xTranslateCoordsReq),
            "::",
            stringify!(srcY)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xWarpPointerReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcWid: CARD32,
    pub dstWid: CARD32,
    pub srcX: INT16,
    pub srcY: INT16,
    pub srcWidth: CARD16,
    pub srcHeight: CARD16,
    pub dstX: INT16,
    pub dstY: INT16,
}
#[test]
fn bindgen_test_layout_xWarpPointerReq() {
    assert_eq!(
        ::std::mem::size_of::<xWarpPointerReq>(),
        24usize,
        concat!("Size of: ", stringify!(xWarpPointerReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xWarpPointerReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xWarpPointerReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).srcWid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(srcWid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).dstWid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(dstWid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).srcX as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(srcX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).srcY as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(srcY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).srcWidth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(srcWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).srcHeight as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(srcHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).dstX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(dstX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xWarpPointerReq>())).dstY as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xWarpPointerReq),
            "::",
            stringify!(dstY)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetInputFocusReq {
    pub reqType: CARD8,
    pub revertTo: CARD8,
    pub length: CARD16,
    pub focus: CARD32,
    pub time: CARD32,
}
#[test]
fn bindgen_test_layout_xSetInputFocusReq() {
    assert_eq!(
        ::std::mem::size_of::<xSetInputFocusReq>(),
        12usize,
        concat!("Size of: ", stringify!(xSetInputFocusReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetInputFocusReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xSetInputFocusReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetInputFocusReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetInputFocusReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetInputFocusReq>())).revertTo as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetInputFocusReq),
            "::",
            stringify!(revertTo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetInputFocusReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetInputFocusReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetInputFocusReq>())).focus as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetInputFocusReq),
            "::",
            stringify!(focus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetInputFocusReq>())).time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetInputFocusReq),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xOpenFontReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub fid: CARD32,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
#[test]
fn bindgen_test_layout_xOpenFontReq() {
    assert_eq!(
        ::std::mem::size_of::<xOpenFontReq>(),
        12usize,
        concat!("Size of: ", stringify!(xOpenFontReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xOpenFontReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xOpenFontReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xOpenFontReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xOpenFontReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xOpenFontReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xOpenFontReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xOpenFontReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xOpenFontReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xOpenFontReq>())).fid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xOpenFontReq),
            "::",
            stringify!(fid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xOpenFontReq>())).nbytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xOpenFontReq),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xOpenFontReq>())).pad1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xOpenFontReq),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xOpenFontReq>())).pad2 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xOpenFontReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryTextExtentsReq {
    pub reqType: CARD8,
    pub oddLength: BOOL,
    pub length: CARD16,
    pub fid: CARD32,
}
#[test]
fn bindgen_test_layout_xQueryTextExtentsReq() {
    assert_eq!(
        ::std::mem::size_of::<xQueryTextExtentsReq>(),
        8usize,
        concat!("Size of: ", stringify!(xQueryTextExtentsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryTextExtentsReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryTextExtentsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTextExtentsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTextExtentsReq>())).oddLength as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReq),
            "::",
            stringify!(oddLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTextExtentsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryTextExtentsReq>())).fid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryTextExtentsReq),
            "::",
            stringify!(fid)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xListFontsReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub maxNames: CARD16,
    pub nbytes: CARD16,
}
#[test]
fn bindgen_test_layout_xListFontsReq() {
    assert_eq!(
        ::std::mem::size_of::<xListFontsReq>(),
        8usize,
        concat!("Size of: ", stringify!(xListFontsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xListFontsReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xListFontsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReq>())).maxNames as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReq),
            "::",
            stringify!(maxNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListFontsReq>())).nbytes as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xListFontsReq),
            "::",
            stringify!(nbytes)
        )
    );
}
pub type xListFontsWithInfoReq = xListFontsReq;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetFontPathReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub nFonts: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
#[test]
fn bindgen_test_layout_xSetFontPathReq() {
    assert_eq!(
        ::std::mem::size_of::<xSetFontPathReq>(),
        8usize,
        concat!("Size of: ", stringify!(xSetFontPathReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetFontPathReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xSetFontPathReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetFontPathReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetFontPathReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetFontPathReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetFontPathReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetFontPathReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetFontPathReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetFontPathReq>())).nFonts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetFontPathReq),
            "::",
            stringify!(nFonts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetFontPathReq>())).pad1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetFontPathReq),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetFontPathReq>())).pad2 as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetFontPathReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCreatePixmapReq {
    pub reqType: CARD8,
    pub depth: CARD8,
    pub length: CARD16,
    pub pid: CARD32,
    pub drawable: CARD32,
    pub width: CARD16,
    pub height: CARD16,
}
#[test]
fn bindgen_test_layout_xCreatePixmapReq() {
    assert_eq!(
        ::std::mem::size_of::<xCreatePixmapReq>(),
        16usize,
        concat!("Size of: ", stringify!(xCreatePixmapReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCreatePixmapReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCreatePixmapReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreatePixmapReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreatePixmapReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreatePixmapReq>())).depth as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreatePixmapReq),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreatePixmapReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreatePixmapReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreatePixmapReq>())).pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreatePixmapReq),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreatePixmapReq>())).drawable as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreatePixmapReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreatePixmapReq>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreatePixmapReq),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreatePixmapReq>())).height as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreatePixmapReq),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCreateGCReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub gc: CARD32,
    pub drawable: CARD32,
    pub mask: CARD32,
}
#[test]
fn bindgen_test_layout_xCreateGCReq() {
    assert_eq!(
        ::std::mem::size_of::<xCreateGCReq>(),
        16usize,
        concat!("Size of: ", stringify!(xCreateGCReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCreateGCReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCreateGCReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGCReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGCReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGCReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGCReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGCReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGCReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGCReq>())).gc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGCReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGCReq>())).drawable as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGCReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGCReq>())).mask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGCReq),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangeGCReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub gc: CARD32,
    pub mask: CARD32,
}
#[test]
fn bindgen_test_layout_xChangeGCReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangeGCReq>(),
        12usize,
        concat!("Size of: ", stringify!(xChangeGCReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangeGCReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xChangeGCReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeGCReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeGCReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeGCReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeGCReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeGCReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeGCReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeGCReq>())).gc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeGCReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeGCReq>())).mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeGCReq),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCopyGCReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcGC: CARD32,
    pub dstGC: CARD32,
    pub mask: CARD32,
}
#[test]
fn bindgen_test_layout_xCopyGCReq() {
    assert_eq!(
        ::std::mem::size_of::<xCopyGCReq>(),
        16usize,
        concat!("Size of: ", stringify!(xCopyGCReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCopyGCReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCopyGCReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyGCReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyGCReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyGCReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyGCReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyGCReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyGCReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyGCReq>())).srcGC as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyGCReq),
            "::",
            stringify!(srcGC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyGCReq>())).dstGC as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyGCReq),
            "::",
            stringify!(dstGC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyGCReq>())).mask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyGCReq),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetDashesReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub gc: CARD32,
    pub dashOffset: CARD16,
    pub nDashes: CARD16,
}
#[test]
fn bindgen_test_layout_xSetDashesReq() {
    assert_eq!(
        ::std::mem::size_of::<xSetDashesReq>(),
        12usize,
        concat!("Size of: ", stringify!(xSetDashesReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetDashesReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xSetDashesReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetDashesReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetDashesReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetDashesReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetDashesReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetDashesReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetDashesReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetDashesReq>())).gc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetDashesReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetDashesReq>())).dashOffset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetDashesReq),
            "::",
            stringify!(dashOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetDashesReq>())).nDashes as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetDashesReq),
            "::",
            stringify!(nDashes)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetClipRectanglesReq {
    pub reqType: CARD8,
    pub ordering: BYTE,
    pub length: CARD16,
    pub gc: CARD32,
    pub xOrigin: INT16,
    pub yOrigin: INT16,
}
#[test]
fn bindgen_test_layout_xSetClipRectanglesReq() {
    assert_eq!(
        ::std::mem::size_of::<xSetClipRectanglesReq>(),
        12usize,
        concat!("Size of: ", stringify!(xSetClipRectanglesReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetClipRectanglesReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xSetClipRectanglesReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetClipRectanglesReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetClipRectanglesReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetClipRectanglesReq>())).ordering as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetClipRectanglesReq),
            "::",
            stringify!(ordering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetClipRectanglesReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetClipRectanglesReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetClipRectanglesReq>())).gc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetClipRectanglesReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetClipRectanglesReq>())).xOrigin as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetClipRectanglesReq),
            "::",
            stringify!(xOrigin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetClipRectanglesReq>())).yOrigin as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetClipRectanglesReq),
            "::",
            stringify!(yOrigin)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xClearAreaReq {
    pub reqType: CARD8,
    pub exposures: BOOL,
    pub length: CARD16,
    pub window: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
}
#[test]
fn bindgen_test_layout_xClearAreaReq() {
    assert_eq!(
        ::std::mem::size_of::<xClearAreaReq>(),
        16usize,
        concat!("Size of: ", stringify!(xClearAreaReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xClearAreaReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xClearAreaReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xClearAreaReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xClearAreaReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xClearAreaReq>())).exposures as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xClearAreaReq),
            "::",
            stringify!(exposures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xClearAreaReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xClearAreaReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xClearAreaReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xClearAreaReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xClearAreaReq>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xClearAreaReq),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xClearAreaReq>())).y as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xClearAreaReq),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xClearAreaReq>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xClearAreaReq),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xClearAreaReq>())).height as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xClearAreaReq),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCopyAreaReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcDrawable: CARD32,
    pub dstDrawable: CARD32,
    pub gc: CARD32,
    pub srcX: INT16,
    pub srcY: INT16,
    pub dstX: INT16,
    pub dstY: INT16,
    pub width: CARD16,
    pub height: CARD16,
}
#[test]
fn bindgen_test_layout_xCopyAreaReq() {
    assert_eq!(
        ::std::mem::size_of::<xCopyAreaReq>(),
        28usize,
        concat!("Size of: ", stringify!(xCopyAreaReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCopyAreaReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCopyAreaReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).srcDrawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(srcDrawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).dstDrawable as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(dstDrawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).gc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).srcX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(srcX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).srcY as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(srcY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).dstX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(dstX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).dstY as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(dstY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).width as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyAreaReq>())).height as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyAreaReq),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCopyPlaneReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub srcDrawable: CARD32,
    pub dstDrawable: CARD32,
    pub gc: CARD32,
    pub srcX: INT16,
    pub srcY: INT16,
    pub dstX: INT16,
    pub dstY: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub bitPlane: CARD32,
}
#[test]
fn bindgen_test_layout_xCopyPlaneReq() {
    assert_eq!(
        ::std::mem::size_of::<xCopyPlaneReq>(),
        32usize,
        concat!("Size of: ", stringify!(xCopyPlaneReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCopyPlaneReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCopyPlaneReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).srcDrawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(srcDrawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).dstDrawable as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(dstDrawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).gc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).srcX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(srcX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).srcY as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(srcY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).dstX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(dstX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).dstY as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(dstY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).width as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).height as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyPlaneReq>())).bitPlane as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyPlaneReq),
            "::",
            stringify!(bitPlane)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xPolyPointReq {
    pub reqType: CARD8,
    pub coordMode: BYTE,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
}
#[test]
fn bindgen_test_layout_xPolyPointReq() {
    assert_eq!(
        ::std::mem::size_of::<xPolyPointReq>(),
        12usize,
        concat!("Size of: ", stringify!(xPolyPointReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xPolyPointReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xPolyPointReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyPointReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyPointReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyPointReq>())).coordMode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyPointReq),
            "::",
            stringify!(coordMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyPointReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyPointReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyPointReq>())).drawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyPointReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyPointReq>())).gc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyPointReq),
            "::",
            stringify!(gc)
        )
    );
}
pub type xPolyLineReq = xPolyPointReq;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xPolySegmentReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
}
#[test]
fn bindgen_test_layout_xPolySegmentReq() {
    assert_eq!(
        ::std::mem::size_of::<xPolySegmentReq>(),
        12usize,
        concat!("Size of: ", stringify!(xPolySegmentReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xPolySegmentReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xPolySegmentReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolySegmentReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolySegmentReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolySegmentReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolySegmentReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolySegmentReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolySegmentReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolySegmentReq>())).drawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolySegmentReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolySegmentReq>())).gc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolySegmentReq),
            "::",
            stringify!(gc)
        )
    );
}
pub type xPolyArcReq = xPolySegmentReq;
pub type xPolyRectangleReq = xPolySegmentReq;
pub type xPolyFillRectangleReq = xPolySegmentReq;
pub type xPolyFillArcReq = xPolySegmentReq;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _FillPolyReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
    pub shape: BYTE,
    pub coordMode: BYTE,
    pub pad1: CARD16,
}
#[test]
fn bindgen_test_layout__FillPolyReq() {
    assert_eq!(
        ::std::mem::size_of::<_FillPolyReq>(),
        16usize,
        concat!("Size of: ", stringify!(_FillPolyReq))
    );
    assert_eq!(
        ::std::mem::align_of::<_FillPolyReq>(),
        4usize,
        concat!("Alignment of ", stringify!(_FillPolyReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FillPolyReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FillPolyReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FillPolyReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_FillPolyReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FillPolyReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_FillPolyReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FillPolyReq>())).drawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FillPolyReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FillPolyReq>())).gc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FillPolyReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FillPolyReq>())).shape as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FillPolyReq),
            "::",
            stringify!(shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FillPolyReq>())).coordMode as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(_FillPolyReq),
            "::",
            stringify!(coordMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FillPolyReq>())).pad1 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_FillPolyReq),
            "::",
            stringify!(pad1)
        )
    );
}
pub type xFillPolyReq = _FillPolyReq;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct _PutImageReq {
    pub reqType: CARD8,
    pub format: CARD8,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
    pub width: CARD16,
    pub height: CARD16,
    pub dstX: INT16,
    pub dstY: INT16,
    pub leftPad: CARD8,
    pub depth: CARD8,
    pub pad: CARD16,
}
#[test]
fn bindgen_test_layout__PutImageReq() {
    assert_eq!(
        ::std::mem::size_of::<_PutImageReq>(),
        24usize,
        concat!("Size of: ", stringify!(_PutImageReq))
    );
    assert_eq!(
        ::std::mem::align_of::<_PutImageReq>(),
        4usize,
        concat!("Alignment of ", stringify!(_PutImageReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).format as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).drawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).gc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).height as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).dstX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(dstX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).dstY as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(dstY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).leftPad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(leftPad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).depth as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PutImageReq>())).pad as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_PutImageReq),
            "::",
            stringify!(pad)
        )
    );
}
pub type xPutImageReq = _PutImageReq;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetImageReq {
    pub reqType: CARD8,
    pub format: CARD8,
    pub length: CARD16,
    pub drawable: CARD32,
    pub x: INT16,
    pub y: INT16,
    pub width: CARD16,
    pub height: CARD16,
    pub planeMask: CARD32,
}
#[test]
fn bindgen_test_layout_xGetImageReq() {
    assert_eq!(
        ::std::mem::size_of::<xGetImageReq>(),
        20usize,
        concat!("Size of: ", stringify!(xGetImageReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetImageReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xGetImageReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).format as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).drawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).y as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).height as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetImageReq>())).planeMask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetImageReq),
            "::",
            stringify!(planeMask)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xPolyTextReq {
    pub reqType: CARD8,
    pub pad: CARD8,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
    pub x: INT16,
    pub y: INT16,
}
#[test]
fn bindgen_test_layout_xPolyTextReq() {
    assert_eq!(
        ::std::mem::size_of::<xPolyTextReq>(),
        16usize,
        concat!("Size of: ", stringify!(xPolyTextReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xPolyTextReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xPolyTextReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyTextReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyTextReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyTextReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyTextReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyTextReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyTextReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyTextReq>())).drawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyTextReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyTextReq>())).gc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyTextReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyTextReq>())).x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyTextReq),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xPolyTextReq>())).y as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xPolyTextReq),
            "::",
            stringify!(y)
        )
    );
}
pub type xPolyText8Req = xPolyTextReq;
pub type xPolyText16Req = xPolyTextReq;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xImageTextReq {
    pub reqType: CARD8,
    pub nChars: BYTE,
    pub length: CARD16,
    pub drawable: CARD32,
    pub gc: CARD32,
    pub x: INT16,
    pub y: INT16,
}
#[test]
fn bindgen_test_layout_xImageTextReq() {
    assert_eq!(
        ::std::mem::size_of::<xImageTextReq>(),
        16usize,
        concat!("Size of: ", stringify!(xImageTextReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xImageTextReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xImageTextReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xImageTextReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xImageTextReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xImageTextReq>())).nChars as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xImageTextReq),
            "::",
            stringify!(nChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xImageTextReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xImageTextReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xImageTextReq>())).drawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xImageTextReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xImageTextReq>())).gc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xImageTextReq),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xImageTextReq>())).x as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xImageTextReq),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xImageTextReq>())).y as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xImageTextReq),
            "::",
            stringify!(y)
        )
    );
}
pub type xImageText8Req = xImageTextReq;
pub type xImageText16Req = xImageTextReq;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCreateColormapReq {
    pub reqType: CARD8,
    pub alloc: BYTE,
    pub length: CARD16,
    pub mid: CARD32,
    pub window: CARD32,
    pub visual: CARD32,
}
#[test]
fn bindgen_test_layout_xCreateColormapReq() {
    assert_eq!(
        ::std::mem::size_of::<xCreateColormapReq>(),
        16usize,
        concat!("Size of: ", stringify!(xCreateColormapReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCreateColormapReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCreateColormapReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateColormapReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateColormapReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateColormapReq>())).alloc as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateColormapReq),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateColormapReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateColormapReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateColormapReq>())).mid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateColormapReq),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateColormapReq>())).window as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateColormapReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateColormapReq>())).visual as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateColormapReq),
            "::",
            stringify!(visual)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCopyColormapAndFreeReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub mid: CARD32,
    pub srcCmap: CARD32,
}
#[test]
fn bindgen_test_layout_xCopyColormapAndFreeReq() {
    assert_eq!(
        ::std::mem::size_of::<xCopyColormapAndFreeReq>(),
        12usize,
        concat!("Size of: ", stringify!(xCopyColormapAndFreeReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCopyColormapAndFreeReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCopyColormapAndFreeReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyColormapAndFreeReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyColormapAndFreeReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyColormapAndFreeReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyColormapAndFreeReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyColormapAndFreeReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyColormapAndFreeReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyColormapAndFreeReq>())).mid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyColormapAndFreeReq),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCopyColormapAndFreeReq>())).srcCmap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCopyColormapAndFreeReq),
            "::",
            stringify!(srcCmap)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllocColorReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
    pub pad2: CARD16,
}
#[test]
fn bindgen_test_layout_xAllocColorReq() {
    assert_eq!(
        ::std::mem::size_of::<xAllocColorReq>(),
        16usize,
        concat!("Size of: ", stringify!(xAllocColorReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllocColorReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllocColorReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReq),
            "::",
            stringify!(cmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReq>())).red as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReq),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReq>())).green as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReq),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReq>())).blue as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReq),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorReq>())).pad2 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllocNamedColorReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
#[test]
fn bindgen_test_layout_xAllocNamedColorReq() {
    assert_eq!(
        ::std::mem::size_of::<xAllocNamedColorReq>(),
        12usize,
        concat!("Size of: ", stringify!(xAllocNamedColorReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllocNamedColorReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllocNamedColorReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReq),
            "::",
            stringify!(cmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReq>())).nbytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReq),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReq>())).pad1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReq),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocNamedColorReq>())).pad2 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocNamedColorReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllocColorCellsReq {
    pub reqType: CARD8,
    pub contiguous: BOOL,
    pub length: CARD16,
    pub cmap: CARD32,
    pub colors: CARD16,
    pub planes: CARD16,
}
#[test]
fn bindgen_test_layout_xAllocColorCellsReq() {
    assert_eq!(
        ::std::mem::size_of::<xAllocColorCellsReq>(),
        12usize,
        concat!("Size of: ", stringify!(xAllocColorCellsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllocColorCellsReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllocColorCellsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReq>())).contiguous as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReq),
            "::",
            stringify!(contiguous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReq),
            "::",
            stringify!(cmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReq>())).colors as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReq),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorCellsReq>())).planes as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorCellsReq),
            "::",
            stringify!(planes)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xAllocColorPlanesReq {
    pub reqType: CARD8,
    pub contiguous: BOOL,
    pub length: CARD16,
    pub cmap: CARD32,
    pub colors: CARD16,
    pub red: CARD16,
    pub green: CARD16,
    pub blue: CARD16,
}
#[test]
fn bindgen_test_layout_xAllocColorPlanesReq() {
    assert_eq!(
        ::std::mem::size_of::<xAllocColorPlanesReq>(),
        16usize,
        concat!("Size of: ", stringify!(xAllocColorPlanesReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xAllocColorPlanesReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xAllocColorPlanesReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReq>())).contiguous as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReq),
            "::",
            stringify!(contiguous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReq),
            "::",
            stringify!(cmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReq>())).colors as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReq),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReq>())).red as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReq),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReq>())).green as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReq),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xAllocColorPlanesReq>())).blue as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xAllocColorPlanesReq),
            "::",
            stringify!(blue)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xFreeColorsReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
    pub planeMask: CARD32,
}
#[test]
fn bindgen_test_layout_xFreeColorsReq() {
    assert_eq!(
        ::std::mem::size_of::<xFreeColorsReq>(),
        12usize,
        concat!("Size of: ", stringify!(xFreeColorsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xFreeColorsReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xFreeColorsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xFreeColorsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xFreeColorsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xFreeColorsReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xFreeColorsReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xFreeColorsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xFreeColorsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xFreeColorsReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xFreeColorsReq),
            "::",
            stringify!(cmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xFreeColorsReq>())).planeMask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xFreeColorsReq),
            "::",
            stringify!(planeMask)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xStoreColorsReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
}
#[test]
fn bindgen_test_layout_xStoreColorsReq() {
    assert_eq!(
        ::std::mem::size_of::<xStoreColorsReq>(),
        8usize,
        concat!("Size of: ", stringify!(xStoreColorsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xStoreColorsReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xStoreColorsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreColorsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreColorsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreColorsReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreColorsReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreColorsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreColorsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreColorsReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreColorsReq),
            "::",
            stringify!(cmap)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xStoreNamedColorReq {
    pub reqType: CARD8,
    pub flags: CARD8,
    pub length: CARD16,
    pub cmap: CARD32,
    pub pixel: CARD32,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
#[test]
fn bindgen_test_layout_xStoreNamedColorReq() {
    assert_eq!(
        ::std::mem::size_of::<xStoreNamedColorReq>(),
        16usize,
        concat!("Size of: ", stringify!(xStoreNamedColorReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xStoreNamedColorReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xStoreNamedColorReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreNamedColorReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreNamedColorReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreNamedColorReq>())).flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreNamedColorReq),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreNamedColorReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreNamedColorReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreNamedColorReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreNamedColorReq),
            "::",
            stringify!(cmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreNamedColorReq>())).pixel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreNamedColorReq),
            "::",
            stringify!(pixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreNamedColorReq>())).nbytes as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreNamedColorReq),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreNamedColorReq>())).pad1 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreNamedColorReq),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xStoreNamedColorReq>())).pad2 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(xStoreNamedColorReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryColorsReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
}
#[test]
fn bindgen_test_layout_xQueryColorsReq() {
    assert_eq!(
        ::std::mem::size_of::<xQueryColorsReq>(),
        8usize,
        concat!("Size of: ", stringify!(xQueryColorsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryColorsReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryColorsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryColorsReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryColorsReq),
            "::",
            stringify!(cmap)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xLookupColorReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cmap: CARD32,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
#[test]
fn bindgen_test_layout_xLookupColorReq() {
    assert_eq!(
        ::std::mem::size_of::<xLookupColorReq>(),
        12usize,
        concat!("Size of: ", stringify!(xLookupColorReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xLookupColorReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xLookupColorReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReq>())).cmap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReq),
            "::",
            stringify!(cmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReq>())).nbytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReq),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReq>())).pad1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReq),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xLookupColorReq>())).pad2 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xLookupColorReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCreateCursorReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cid: CARD32,
    pub source: CARD32,
    pub mask: CARD32,
    pub foreRed: CARD16,
    pub foreGreen: CARD16,
    pub foreBlue: CARD16,
    pub backRed: CARD16,
    pub backGreen: CARD16,
    pub backBlue: CARD16,
    pub x: CARD16,
    pub y: CARD16,
}
#[test]
fn bindgen_test_layout_xCreateCursorReq() {
    assert_eq!(
        ::std::mem::size_of::<xCreateCursorReq>(),
        32usize,
        concat!("Size of: ", stringify!(xCreateCursorReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCreateCursorReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCreateCursorReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).cid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(cid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).source as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).mask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).foreRed as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(foreRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).foreGreen as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(foreGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).foreBlue as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(foreBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).backRed as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(backRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).backGreen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(backGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).backBlue as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(backBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).x as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateCursorReq>())).y as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateCursorReq),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xCreateGlyphCursorReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cid: CARD32,
    pub source: CARD32,
    pub mask: CARD32,
    pub sourceChar: CARD16,
    pub maskChar: CARD16,
    pub foreRed: CARD16,
    pub foreGreen: CARD16,
    pub foreBlue: CARD16,
    pub backRed: CARD16,
    pub backGreen: CARD16,
    pub backBlue: CARD16,
}
#[test]
fn bindgen_test_layout_xCreateGlyphCursorReq() {
    assert_eq!(
        ::std::mem::size_of::<xCreateGlyphCursorReq>(),
        32usize,
        concat!("Size of: ", stringify!(xCreateGlyphCursorReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xCreateGlyphCursorReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xCreateGlyphCursorReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).cid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(cid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).source as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).mask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).sourceChar as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(sourceChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).maskChar as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(maskChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).foreRed as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(foreRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).foreGreen as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(foreGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).foreBlue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(foreBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).backRed as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(backRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).backGreen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(backGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xCreateGlyphCursorReq>())).backBlue as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(xCreateGlyphCursorReq),
            "::",
            stringify!(backBlue)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xRecolorCursorReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub cursor: CARD32,
    pub foreRed: CARD16,
    pub foreGreen: CARD16,
    pub foreBlue: CARD16,
    pub backRed: CARD16,
    pub backGreen: CARD16,
    pub backBlue: CARD16,
}
#[test]
fn bindgen_test_layout_xRecolorCursorReq() {
    assert_eq!(
        ::std::mem::size_of::<xRecolorCursorReq>(),
        20usize,
        concat!("Size of: ", stringify!(xRecolorCursorReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xRecolorCursorReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xRecolorCursorReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).cursor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).foreRed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(foreRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).foreGreen as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(foreGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).foreBlue as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(foreBlue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).backRed as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(backRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).backGreen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(backGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRecolorCursorReq>())).backBlue as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xRecolorCursorReq),
            "::",
            stringify!(backBlue)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryBestSizeReq {
    pub reqType: CARD8,
    pub class: CARD8,
    pub length: CARD16,
    pub drawable: CARD32,
    pub width: CARD16,
    pub height: CARD16,
}
#[test]
fn bindgen_test_layout_xQueryBestSizeReq() {
    assert_eq!(
        ::std::mem::size_of::<xQueryBestSizeReq>(),
        12usize,
        concat!("Size of: ", stringify!(xQueryBestSizeReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryBestSizeReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xQueryBestSizeReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReq>())).class as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReq),
            "::",
            stringify!(class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReq>())).drawable as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReq),
            "::",
            stringify!(drawable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReq>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReq),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryBestSizeReq>())).height as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryBestSizeReq),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xQueryExtensionReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub nbytes: CARD16,
    pub pad1: BYTE,
    pub pad2: BYTE,
}
#[test]
fn bindgen_test_layout_xQueryExtensionReq() {
    assert_eq!(
        ::std::mem::size_of::<xQueryExtensionReq>(),
        8usize,
        concat!("Size of: ", stringify!(xQueryExtensionReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xQueryExtensionReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xQueryExtensionReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReq>())).nbytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReq),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReq>())).pad1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReq),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xQueryExtensionReq>())).pad2 as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(xQueryExtensionReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetModifierMappingReq {
    pub reqType: CARD8,
    pub numKeyPerModifier: CARD8,
    pub length: CARD16,
}
#[test]
fn bindgen_test_layout_xSetModifierMappingReq() {
    assert_eq!(
        ::std::mem::size_of::<xSetModifierMappingReq>(),
        4usize,
        concat!("Size of: ", stringify!(xSetModifierMappingReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetModifierMappingReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xSetModifierMappingReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetModifierMappingReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetModifierMappingReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xSetModifierMappingReq>())).numKeyPerModifier as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetModifierMappingReq),
            "::",
            stringify!(numKeyPerModifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetModifierMappingReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetModifierMappingReq),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetPointerMappingReq {
    pub reqType: CARD8,
    pub nElts: CARD8,
    pub length: CARD16,
}
#[test]
fn bindgen_test_layout_xSetPointerMappingReq() {
    assert_eq!(
        ::std::mem::size_of::<xSetPointerMappingReq>(),
        4usize,
        concat!("Size of: ", stringify!(xSetPointerMappingReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetPointerMappingReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xSetPointerMappingReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetPointerMappingReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetPointerMappingReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetPointerMappingReq>())).nElts as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetPointerMappingReq),
            "::",
            stringify!(nElts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetPointerMappingReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetPointerMappingReq),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xGetKeyboardMappingReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub firstKeyCode: CARD8,
    pub count: CARD8,
    pub pad1: CARD16,
}
#[test]
fn bindgen_test_layout_xGetKeyboardMappingReq() {
    assert_eq!(
        ::std::mem::size_of::<xGetKeyboardMappingReq>(),
        8usize,
        concat!("Size of: ", stringify!(xGetKeyboardMappingReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xGetKeyboardMappingReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xGetKeyboardMappingReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xGetKeyboardMappingReq>())).firstKeyCode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReq),
            "::",
            stringify!(firstKeyCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReq>())).count as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReq),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xGetKeyboardMappingReq>())).pad1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xGetKeyboardMappingReq),
            "::",
            stringify!(pad1)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangeKeyboardMappingReq {
    pub reqType: CARD8,
    pub keyCodes: CARD8,
    pub length: CARD16,
    pub firstKeyCode: CARD8,
    pub keySymsPerKeyCode: CARD8,
    pub pad1: CARD16,
}
#[test]
fn bindgen_test_layout_xChangeKeyboardMappingReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangeKeyboardMappingReq>(),
        8usize,
        concat!("Size of: ", stringify!(xChangeKeyboardMappingReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangeKeyboardMappingReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xChangeKeyboardMappingReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeKeyboardMappingReq>())).reqType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardMappingReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeKeyboardMappingReq>())).keyCodes as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardMappingReq),
            "::",
            stringify!(keyCodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeKeyboardMappingReq>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardMappingReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeKeyboardMappingReq>())).firstKeyCode as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardMappingReq),
            "::",
            stringify!(firstKeyCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeKeyboardMappingReq>())).keySymsPerKeyCode as *const _
                as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardMappingReq),
            "::",
            stringify!(keySymsPerKeyCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeKeyboardMappingReq>())).pad1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardMappingReq),
            "::",
            stringify!(pad1)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangeKeyboardControlReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub mask: CARD32,
}
#[test]
fn bindgen_test_layout_xChangeKeyboardControlReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangeKeyboardControlReq>(),
        8usize,
        concat!("Size of: ", stringify!(xChangeKeyboardControlReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangeKeyboardControlReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xChangeKeyboardControlReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeKeyboardControlReq>())).reqType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardControlReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeKeyboardControlReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardControlReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangeKeyboardControlReq>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardControlReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeKeyboardControlReq>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeKeyboardControlReq),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xBellReq {
    pub reqType: CARD8,
    pub percent: INT8,
    pub length: CARD16,
}
#[test]
fn bindgen_test_layout_xBellReq() {
    assert_eq!(
        ::std::mem::size_of::<xBellReq>(),
        4usize,
        concat!("Size of: ", stringify!(xBellReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xBellReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xBellReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xBellReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xBellReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xBellReq>())).percent as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xBellReq),
            "::",
            stringify!(percent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xBellReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xBellReq),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangePointerControlReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub accelNum: INT16,
    pub accelDenum: INT16,
    pub threshold: INT16,
    pub doAccel: BOOL,
    pub doThresh: BOOL,
}
#[test]
fn bindgen_test_layout_xChangePointerControlReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangePointerControlReq>(),
        12usize,
        concat!("Size of: ", stringify!(xChangePointerControlReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangePointerControlReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xChangePointerControlReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangePointerControlReq>())).reqType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePointerControlReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePointerControlReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePointerControlReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangePointerControlReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePointerControlReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangePointerControlReq>())).accelNum as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePointerControlReq),
            "::",
            stringify!(accelNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangePointerControlReq>())).accelDenum as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePointerControlReq),
            "::",
            stringify!(accelDenum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangePointerControlReq>())).threshold as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePointerControlReq),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangePointerControlReq>())).doAccel as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePointerControlReq),
            "::",
            stringify!(doAccel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xChangePointerControlReq>())).doThresh as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangePointerControlReq),
            "::",
            stringify!(doThresh)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xSetScreenSaverReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub timeout: INT16,
    pub interval: INT16,
    pub preferBlank: BYTE,
    pub allowExpose: BYTE,
    pub pad2: CARD16,
}
#[test]
fn bindgen_test_layout_xSetScreenSaverReq() {
    assert_eq!(
        ::std::mem::size_of::<xSetScreenSaverReq>(),
        12usize,
        concat!("Size of: ", stringify!(xSetScreenSaverReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xSetScreenSaverReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xSetScreenSaverReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetScreenSaverReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetScreenSaverReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetScreenSaverReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetScreenSaverReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetScreenSaverReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetScreenSaverReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetScreenSaverReq>())).timeout as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetScreenSaverReq),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetScreenSaverReq>())).interval as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetScreenSaverReq),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetScreenSaverReq>())).preferBlank as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetScreenSaverReq),
            "::",
            stringify!(preferBlank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetScreenSaverReq>())).allowExpose as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetScreenSaverReq),
            "::",
            stringify!(allowExpose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xSetScreenSaverReq>())).pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xSetScreenSaverReq),
            "::",
            stringify!(pad2)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangeHostsReq {
    pub reqType: CARD8,
    pub mode: BYTE,
    pub length: CARD16,
    pub hostFamily: CARD8,
    pub pad: BYTE,
    pub hostLength: CARD16,
}
#[test]
fn bindgen_test_layout_xChangeHostsReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangeHostsReq>(),
        8usize,
        concat!("Size of: ", stringify!(xChangeHostsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangeHostsReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xChangeHostsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeHostsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeHostsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeHostsReq>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeHostsReq),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeHostsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeHostsReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeHostsReq>())).hostFamily as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeHostsReq),
            "::",
            stringify!(hostFamily)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeHostsReq>())).pad as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeHostsReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeHostsReq>())).hostLength as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeHostsReq),
            "::",
            stringify!(hostLength)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xListHostsReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
}
#[test]
fn bindgen_test_layout_xListHostsReq() {
    assert_eq!(
        ::std::mem::size_of::<xListHostsReq>(),
        4usize,
        concat!("Size of: ", stringify!(xListHostsReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xListHostsReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xListHostsReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xListHostsReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xListHostsReq),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xChangeModeReq {
    pub reqType: CARD8,
    pub mode: BYTE,
    pub length: CARD16,
}
#[test]
fn bindgen_test_layout_xChangeModeReq() {
    assert_eq!(
        ::std::mem::size_of::<xChangeModeReq>(),
        4usize,
        concat!("Size of: ", stringify!(xChangeModeReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xChangeModeReq>(),
        2usize,
        concat!("Alignment of ", stringify!(xChangeModeReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeModeReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeModeReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeModeReq>())).mode as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeModeReq),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xChangeModeReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xChangeModeReq),
            "::",
            stringify!(length)
        )
    );
}
pub type xSetAccessControlReq = xChangeModeReq;
pub type xSetCloseDownModeReq = xChangeModeReq;
pub type xForceScreenSaverReq = xChangeModeReq;
#[repr(C)]
#[derive(Protocol, Debug, Copy, Clone, PartialEq, Eq)]
pub struct xRotatePropertiesReq {
    pub reqType: CARD8,
    pub pad: BYTE,
    pub length: CARD16,
    pub window: CARD32,
    pub nAtoms: CARD16,
    pub nPositions: INT16,
}
#[test]
fn bindgen_test_layout_xRotatePropertiesReq() {
    assert_eq!(
        ::std::mem::size_of::<xRotatePropertiesReq>(),
        12usize,
        concat!("Size of: ", stringify!(xRotatePropertiesReq))
    );
    assert_eq!(
        ::std::mem::align_of::<xRotatePropertiesReq>(),
        4usize,
        concat!("Alignment of ", stringify!(xRotatePropertiesReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRotatePropertiesReq>())).reqType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xRotatePropertiesReq),
            "::",
            stringify!(reqType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRotatePropertiesReq>())).pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xRotatePropertiesReq),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRotatePropertiesReq>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xRotatePropertiesReq),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRotatePropertiesReq>())).window as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xRotatePropertiesReq),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRotatePropertiesReq>())).nAtoms as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xRotatePropertiesReq),
            "::",
            stringify!(nAtoms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xRotatePropertiesReq>())).nPositions as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xRotatePropertiesReq),
            "::",
            stringify!(nPositions)
        )
    );
}
